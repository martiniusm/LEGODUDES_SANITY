{"version":3,"file":"_internal.esm.js","sources":["../../src/legacy/actionUtils.ts","../../src/sanity/extractSchema.ts","../../src/sanity/validation/createValidationResult.ts","../../src/sanity/groupProblems.ts","../../src/sanity/validation/utils/getDupes.ts","../../src/core/traverseSchema.ts","../../src/sanity/coreTypes.ts","../../src/sanity/traverseSchema.ts","../../src/sanity/validation/types/array.ts","../../src/sanity/validation/utils/isJSONTypeOf.ts","../../src/sanity/validation/types/block.ts","../../src/sanity/validation/utils/validateNonObjectFieldsProp.ts","../../src/sanity/validation/utils/validateTypeName.ts","../../src/sanity/validation/types/deprecated.ts","../../src/sanity/validation/types/common.ts","../../src/sanity/validation/types/crossDatasetReference.ts","../../src/sanity/validation/utils/isComponent.ts","../../src/sanity/validation/utils/validateComponent.ts","../../src/sanity/validation/types/object.ts","../../src/sanity/validation/types/document.ts","../../src/sanity/validation/types/file.ts","../../src/sanity/validation/types/image.ts","../../src/sanity/validation/types/reference.ts","../../src/sanity/validation/types/rootType.ts","../../src/sanity/validation/types/slug.ts","../../src/sanity/validateSchema.ts"],"sourcesContent":["import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {type SchemaType} from '@sanity/types'\nimport {difference} from 'lodash'\n\nconst ACTIONS_FLAG = '__experimental_actions'\n\nconst DEFAULT_ACTIONS = ['create', 'update', 'delete', 'publish']\nconst VALID_ACTIONS = DEFAULT_ACTIONS\n\n// todo: enable this when officially deprecating experimental actions\nconst DEPRECATE_EXPERIMENTAL_ACTIONS = false\n\nconst hasWarned = {}\nconst readActions = (schemaType: SchemaType): string[] => {\n  if (DEPRECATE_EXPERIMENTAL_ACTIONS && !(schemaType.name in hasWarned)) {\n    console.warn(`Heads up! Experimental actions is now deprecated and replaced by Document Actions. Read more about how to migrate on ${generateHelpUrl(\n      'experimental-actions-replaced-by-document-actions',\n    )}\".\n`)\n    hasWarned[schemaType.name] = true\n  }\n\n  return ACTIONS_FLAG in schemaType ? (schemaType[ACTIONS_FLAG] as string[]) : DEFAULT_ACTIONS\n}\n\nconst validateActions = (typeName: string, actions: string[]) => {\n  if (!Array.isArray(actions)) {\n    throw new Error(\n      `The value of <type>.${ACTIONS_FLAG} should be an array with any of the actions ${VALID_ACTIONS.join(\n        ', ',\n      )}`,\n    )\n  }\n\n  const invalid = difference(actions, VALID_ACTIONS)\n\n  if (invalid.length > 0) {\n    throw new Error(\n      `Invalid action${\n        invalid.length > 1 ? 's' : ''\n      } configured for schema type \"${typeName}\": ${invalid.join(\n        ', ',\n      )}. Valid actions are: ${VALID_ACTIONS.join(', ')}`,\n    )\n  }\n\n  return actions\n}\n\nexport const resolveEnabledActions = (schemaType: SchemaType): string[] =>\n  validateActions(schemaType.name, readActions(schemaType))\n\nexport const isActionEnabled = (schemaType: SchemaType, action: string): boolean =>\n  resolveEnabledActions(schemaType).includes(action)\n","import {\n  type ArraySchemaType,\n  type NumberSchemaType,\n  type ObjectField,\n  type ObjectFieldType,\n  type ObjectSchemaType,\n  type ReferenceSchemaType,\n  type Rule,\n  type Schema as SchemaDef,\n  type SchemaType as SanitySchemaType,\n  type StringSchemaType,\n} from '@sanity/types'\nimport {\n  type ArrayTypeNode,\n  createReferenceTypeNode,\n  type DocumentSchemaType,\n  type InlineTypeNode,\n  type NullTypeNode,\n  type NumberTypeNode,\n  type ObjectAttribute,\n  type ObjectTypeNode,\n  type SchemaType,\n  type StringTypeNode,\n  type TypeDeclarationSchemaType,\n  type TypeNode,\n  type UnionTypeNode,\n  type UnknownTypeNode,\n} from 'groq-js'\n\nconst documentDefaultFields = (typeName: string): Record<string, ObjectAttribute> => ({\n  _id: {\n    type: 'objectAttribute',\n    value: {type: 'string'},\n  },\n  _type: {\n    type: 'objectAttribute',\n    value: {type: 'string', value: typeName},\n  },\n  _createdAt: {\n    type: 'objectAttribute',\n    value: {type: 'string'},\n  },\n  _updatedAt: {\n    type: 'objectAttribute',\n    value: {type: 'string'},\n  },\n  _rev: {\n    type: 'objectAttribute',\n    value: {type: 'string'},\n  },\n})\nconst typesMap = new Map<string, TypeNode>([\n  ['text', {type: 'string'}],\n  ['url', {type: 'string'}],\n  ['datetime', {type: 'string'}],\n  ['date', {type: 'string'}],\n  ['boolean', {type: 'boolean'}],\n  ['email', {type: 'string'}],\n])\n\nexport interface ExtractSchemaOptions {\n  enforceRequiredFields?: boolean\n}\n\nexport function extractSchema(\n  schemaDef: SchemaDef,\n  extractOptions: ExtractSchemaOptions = {},\n): SchemaType {\n  const inlineFields = new Set<SanitySchemaType>()\n  const schema: SchemaType = []\n\n  // get a list of all the types in the schema, sorted by their dependencies. This ensures that when we check for inline/reference types, we have already processed the type\n  const sortedSchemaTypeNames = sortByDependencies(schemaDef)\n  sortedSchemaTypeNames.forEach((typeName) => {\n    const schemaType = schemaDef.get(typeName)\n    if (schemaType === undefined) {\n      return\n    }\n    const base = convertBaseType(schemaType)\n    if (base === null) {\n      return\n    }\n    if (base.type === 'type') {\n      inlineFields.add(schemaType)\n    }\n\n    schema.push(base)\n  })\n\n  function convertBaseType(\n    schemaType: SanitySchemaType,\n  ): DocumentSchemaType | TypeDeclarationSchemaType | null {\n    let typeName: string | undefined\n    if (schemaType.type) {\n      typeName = schemaType.type.name\n    } else if ('jsonType' in schemaType) {\n      typeName = schemaType.jsonType\n    }\n\n    if (typeName === 'document' && isObjectType(schemaType)) {\n      const defaultAttributes = documentDefaultFields(schemaType.name)\n\n      const object = createObject(schemaType)\n      if (object.type === 'unknown') {\n        return null\n      }\n\n      return {\n        name: schemaType.name,\n        type: 'document',\n        attributes: {\n          ...defaultAttributes,\n          ...object.attributes,\n        },\n      }\n    }\n\n    const value = convertSchemaType(schemaType)\n    if (value.type === 'unknown') {\n      return null\n    }\n    if (value.type === 'object') {\n      return {\n        name: schemaType.name,\n        type: 'type',\n        value: {\n          type: 'object',\n          attributes: {\n            _type: {\n              type: 'objectAttribute',\n              value: {\n                type: 'string',\n                value: schemaType.name,\n              },\n            },\n            ...value.attributes,\n          },\n        },\n      }\n    }\n\n    return {\n      name: schemaType.name,\n      type: 'type',\n      value,\n    }\n  }\n\n  function convertSchemaType(schemaType: SanitySchemaType): TypeNode {\n    if (lastType(schemaType)?.name === 'document') {\n      return createReferenceTypeNode(schemaType.name)\n    }\n\n    // if we have already seen the base type, we can just reference it\n    if (inlineFields.has(schemaType.type)) {\n      return {type: 'inline', name: schemaType.type.name} satisfies InlineTypeNode\n    }\n\n    // If we have a type that is point to a type, that is pointing to a type, we assume this is a circular reference\n    // and we return an inline type referencing it instead\n    if (schemaType.type?.type?.name === 'object') {\n      return {type: 'inline', name: schemaType.type.name} satisfies InlineTypeNode\n    }\n\n    if (isStringType(schemaType)) {\n      return createStringTypeNodeDefintion(schemaType)\n    }\n\n    if (isNumberType(schemaType)) {\n      return createNumberTypeNodeDefintion(schemaType)\n    }\n\n    // map some known types\n    if (typesMap.has(schemaType.name)) {\n      return typesMap.get(schemaType.name)\n    }\n\n    // Cross dataset references are not supported\n    if (isCrossDatasetReferenceType(schemaType)) {\n      return {type: 'unknown'} satisfies UnknownTypeNode // we don't support cross-dataset references at the moment\n    }\n\n    if (isReferenceType(schemaType)) {\n      return createReferenceTypeNodeDefintion(schemaType)\n    }\n\n    if (isArrayType(schemaType)) {\n      return createArray(schemaType)\n    }\n\n    if (isObjectType(schemaType)) {\n      return createObject(schemaType)\n    }\n\n    throw new Error(`Type \"${schemaType.name}\" not found`)\n  }\n\n  function createObject(\n    schemaType: ObjectSchemaType | SanitySchemaType,\n  ): ObjectTypeNode | UnknownTypeNode {\n    const attributes: Record<string, ObjectAttribute> = {}\n\n    const fields = gatherFields(schemaType)\n    for (const field of fields) {\n      const fieldIsRequired = isFieldRequired(field)\n      const value = convertSchemaType(field.type)\n      if (value === null) {\n        continue\n      }\n      attributes[field.name] = {\n        type: 'objectAttribute',\n        value,\n        optional: extractOptions.enforceRequiredFields ? fieldIsRequired : true,\n      }\n    }\n\n    // Ignore empty objects\n    if (Object.keys(attributes).length === 0) {\n      return {type: 'unknown'} satisfies UnknownTypeNode\n    }\n\n    if (schemaType.type?.name !== 'document') {\n      attributes._type = {\n        type: 'objectAttribute',\n        value: {\n          type: 'string',\n          value: schemaType.name,\n        },\n      }\n    }\n\n    return {\n      type: 'object',\n      attributes,\n    }\n  }\n\n  function createArray(arraySchemaType: ArraySchemaType): ArrayTypeNode | NullTypeNode {\n    const of: TypeNode[] = []\n    for (const item of arraySchemaType.of) {\n      const field = convertSchemaType(item)\n      if (field.type === 'inline') {\n        of.push({\n          type: 'object',\n          attributes: {\n            _key: createKeyField(),\n          },\n          rest: field,\n        } satisfies ObjectTypeNode)\n      } else if (field.type === 'object') {\n        field.rest = {\n          type: 'object',\n          attributes: {\n            _key: createKeyField(),\n          },\n        }\n        of.push(field)\n      } else {\n        of.push(field)\n      }\n    }\n\n    if (of.length === 0) {\n      return {type: 'null'}\n    }\n\n    return {\n      type: 'array',\n      of:\n        of.length > 1\n          ? {\n              type: 'union',\n              of,\n            }\n          : of[0],\n    }\n  }\n\n  return schema\n}\n\nfunction createKeyField(): ObjectAttribute<StringTypeNode> {\n  return {\n    type: 'objectAttribute',\n    value: {\n      type: 'string',\n    },\n  }\n}\n\nfunction isFieldRequired(field: ObjectField): boolean {\n  const {validation} = field.type\n  if (!validation) {\n    return false\n  }\n  const rules = Array.isArray(validation) ? validation : [validation]\n  for (const rule of rules) {\n    let required = false\n\n    // hack to check if a field is required. We create a proxy that returns itself when a method is called,\n    // if the method is \"required\" we set a flag\n    const proxy = new Proxy(\n      {},\n      {\n        get: (target, methodName) => () => {\n          if (methodName === 'required') {\n            required = true\n          }\n          return proxy\n        },\n      },\n    ) as Rule\n    if (typeof rule === 'function') {\n      rule(proxy)\n      if (required) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n\nfunction isObjectType(typeDef: SanitySchemaType): typeDef is ObjectSchemaType {\n  return isType(typeDef, 'object') || typeDef.jsonType === 'object' || 'fields' in typeDef\n}\nfunction isArrayType(typeDef: SanitySchemaType): typeDef is ArraySchemaType {\n  return isType(typeDef, 'array')\n}\nfunction isReferenceType(typeDef: SanitySchemaType): typeDef is ReferenceSchemaType {\n  return isType(typeDef, 'reference')\n}\nfunction isCrossDatasetReferenceType(typeDef: SanitySchemaType) {\n  return isType(typeDef, 'crossDatasetReference')\n}\nfunction isStringType(typeDef: SanitySchemaType): typeDef is StringSchemaType {\n  return isType(typeDef, 'string')\n}\nfunction isNumberType(typeDef: SanitySchemaType): typeDef is NumberSchemaType {\n  return isType(typeDef, 'number')\n}\nfunction createStringTypeNodeDefintion(\n  stringSchemaType: StringSchemaType,\n): StringTypeNode | UnionTypeNode<StringTypeNode> {\n  if (stringSchemaType.options?.list) {\n    return {\n      type: 'union',\n      of: stringSchemaType.options.list.map((v) => ({\n        type: 'string',\n        value: typeof v === 'string' ? v : v.value,\n      })),\n    }\n  }\n  return {\n    type: 'string',\n  }\n}\n\nfunction createNumberTypeNodeDefintion(\n  numberSchemaType: NumberSchemaType,\n): NumberTypeNode | UnionTypeNode<NumberTypeNode> {\n  if (numberSchemaType.options?.list) {\n    return {\n      type: 'union',\n      of: numberSchemaType.options.list.map((v) => ({\n        type: 'number',\n        value: typeof v === 'number' ? v : v.value,\n      })),\n    }\n  }\n  return {\n    type: 'number',\n  }\n}\n\nfunction createReferenceTypeNodeDefintion(\n  reference: ReferenceSchemaType,\n): ObjectTypeNode | UnionTypeNode<ObjectTypeNode> {\n  const references = gatherReferenceNames(reference)\n  if (references.length === 1) {\n    return createReferenceTypeNode(references[0])\n  }\n\n  return {\n    type: 'union',\n    of: references.map((name) => createReferenceTypeNode(name)),\n  }\n}\n\n// Traverse the reference type tree and gather all the reference names\nfunction gatherReferenceNames(type: ReferenceSchemaType): string[] {\n  const allReferences = gatherReferenceTypes(type)\n  // Remove duplicates\n  return [...new Set([...allReferences.map((ref) => ref.name)])]\n}\n\nfunction gatherReferenceTypes(type: ReferenceSchemaType): ObjectSchemaType[] {\n  const refTo = 'to' in type ? type.to : []\n  if ('type' in type && isReferenceType(type.type)) {\n    return [...gatherReferenceTypes(type.type), ...refTo]\n  }\n\n  return refTo\n}\n\n// Traverse the type tree and gather all the fields\nfunction gatherFields(type: SanitySchemaType | ObjectSchemaType): ObjectField[] {\n  if ('fields' in type) {\n    return type.type ? gatherFields(type.type).concat(type.fields) : type.fields\n  }\n\n  return []\n}\n\n// Traverse the type tree and check if the type or any of its subtypes are of the given type\nfunction isType(\n  typeDef: SanitySchemaType | ObjectField | ObjectFieldType,\n  typeName: string,\n): boolean {\n  let type: SchemaType | ObjectField | ObjectFieldType | undefined = typeDef\n  while (type) {\n    if (type.name === typeName || (type.type && type.type.name === typeName)) {\n      return true\n    }\n\n    type = type.type\n  }\n  return false\n}\n\n// Traverse the type tree and return the \"last\" type, ie deepest type in the tree\nfunction lastType(typeDef: SanitySchemaType): SanitySchemaType | undefined {\n  let type: SchemaType | ObjectField | ObjectFieldType | undefined = typeDef\n  while (type) {\n    if (!type.type) {\n      return type\n    }\n    type = type.type\n  }\n\n  return undefined\n}\n\n// Sorts the types by their dependencies by using a topological sort depth-first algorithm.\nfunction sortByDependencies(compiledSchema: SchemaDef): string[] {\n  const seen = new Set<SanitySchemaType>()\n\n  // Walks the dependencies of a schema type and adds them to the dependencies set\n  function walkDependencies(\n    schemaType: SanitySchemaType,\n    dependencies: Set<SanitySchemaType>,\n  ): void {\n    if (seen.has(schemaType)) {\n      return\n    }\n    seen.add(schemaType)\n\n    if ('fields' in schemaType) {\n      for (const field of gatherFields(schemaType)) {\n        let schemaTypeName: string | undefined\n        if (schemaType.type.type) {\n          schemaTypeName = field.type.type.name\n        } else if ('jsonType' in schemaType.type) {\n          schemaTypeName = field.type.jsonType\n        }\n\n        if (\n          schemaTypeName === 'document' ||\n          schemaTypeName === 'object' ||\n          schemaTypeName === 'block'\n        ) {\n          if (isReferenceType(field.type)) {\n            field.type.to.forEach((ref) => dependencies.add(ref.type))\n          } else {\n            dependencies.add(field.type)\n          }\n        }\n        walkDependencies(field.type, dependencies)\n      }\n    } else if ('of' in schemaType) {\n      for (const item of schemaType.of) {\n        walkDependencies(item, dependencies)\n      }\n    }\n  }\n  const dependencyMap = new Map<SanitySchemaType, Set<SanitySchemaType>>()\n  compiledSchema.getTypeNames().forEach((typeName) => {\n    const schemaType = compiledSchema.get(typeName)\n    if (schemaType === undefined || schemaType.type === null) {\n      return\n    }\n    const dependencies = new Set<SanitySchemaType>()\n\n    walkDependencies(schemaType, dependencies)\n    dependencyMap.set(schemaType, dependencies)\n  })\n\n  // Sorts the types by their dependencies\n  const typeNames: string[] = []\n  // holds a temporary mark for types that are currently being visited, to detect cyclic dependencies\n  const currentlyVisiting = new Set<SanitySchemaType>()\n\n  // holds a permanent mark for types that have been already visited\n  const visited = new Set<SanitySchemaType>()\n\n  // visit implements a depth-first search\n  function visit(type: SanitySchemaType) {\n    if (visited.has(type)) {\n      return\n    }\n    // If we find a type that is already in the temporary mark, we have a cyclic dependency.\n    if (currentlyVisiting.has(type)) {\n      return\n    }\n    // mark this as a temporary mark, meaning it's being visited\n    currentlyVisiting.add(type)\n    const deps = dependencyMap.get(type)\n    if (deps !== undefined) {\n      deps.forEach((dep) => visit(dep))\n    }\n    currentlyVisiting.delete(type)\n    visited.add(type)\n\n    if (!typeNames.includes(type.name)) {\n      typeNames.unshift(type.name)\n    }\n  }\n  // Visit all types in the dependency map\n  for (const [type] of dependencyMap) {\n    visit(type)\n  }\n\n  return typeNames\n}\n","import {type SchemaValidationResult} from '../typedefs'\n\n// Temporary solution to ensure we have a central registry over used helpIds\nexport const HELP_IDS = {\n  TYPE_INVALID: 'schema-type-invalid',\n  TYPE_IS_ESM_MODULE: 'schema-type-is-esm-module',\n  TYPE_NAME_RESERVED: 'schema-type-name-reserved',\n  TYPE_MISSING_NAME: 'schema-type-missing-name-or-type',\n  TYPE_MISSING_TYPE: 'schema-type-missing-name-or-type',\n  TYPE_TITLE_RECOMMENDED: 'schema-type-title-is-recommended',\n  TYPE_TITLE_INVALID: 'schema-type-title-is-recommended',\n  OBJECT_FIELDS_INVALID: 'schema-object-fields-invalid',\n  OBJECT_FIELD_NOT_UNIQUE: 'schema-object-fields-invalid',\n  OBJECT_FIELD_NAME_INVALID: 'schema-object-fields-invalid',\n  OBJECT_FIELD_DEFINITION_INVALID_TYPE: 'schema-object-fields-invalid',\n  ARRAY_PREDEFINED_CHOICES_INVALID: 'schema-predefined-choices-invalid',\n  ARRAY_OF_ARRAY: 'schema-array-of-array',\n  ARRAY_OF_INVALID: 'schema-array-of-invalid',\n  ARRAY_OF_NOT_UNIQUE: 'schema-array-of-invalid',\n  ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT: 'schema-array-of-type-global-type-conflict',\n  ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT: 'schema-array-of-type-builtin-type-conflict',\n  REFERENCE_TO_INVALID: 'schema-reference-to-invalid',\n  REFERENCE_TO_NOT_UNIQUE: 'schema-reference-to-invalid',\n  REFERENCE_INVALID_OPTIONS: 'schema-reference-invalid-options',\n  REFERENCE_INVALID_OPTIONS_LOCATION: 'schema-reference-options-nesting',\n  REFERENCE_INVALID_FILTER_PARAMS_COMBINATION: 'schema-reference-filter-params-combination',\n  SLUG_SLUGIFY_FN_RENAMED: 'slug-slugifyfn-renamed',\n  ASSET_METADATA_FIELD_INVALID: 'asset-metadata-field-invalid',\n  CROSS_DATASET_REFERENCE_INVALID: 'cross-dataset-reference-invalid',\n  DEPRECATED_BLOCKEDITOR_KEY: 'schema-deprecated-blockeditor-key',\n  STANDALONE_BLOCK_TYPE: 'schema-standalone-block-type',\n}\n\nfunction createValidationResult(\n  severity: SchemaValidationResult['severity'],\n  message: string,\n  helpId: string | null,\n): SchemaValidationResult {\n  if (helpId && !Object.keys(HELP_IDS).some((id) => HELP_IDS[id] === helpId)) {\n    throw new Error(\n      `Used the unknown helpId \"${helpId}\", please add it to the array in createValidationResult.js`,\n    )\n  }\n  return {\n    severity,\n    message,\n    helpId,\n  }\n}\n\nexport const error = (message: string, helpId?: string | null): SchemaValidationResult =>\n  createValidationResult('error', message, helpId)\n\nexport const warning = (message: string, helpId?: string | null): SchemaValidationResult =>\n  createValidationResult('warning', message, helpId)\n","import {\n  type SchemaType,\n  type SchemaTypeDefinition,\n  type SchemaValidationProblemGroup,\n} from '@sanity/types'\nimport {flatten, get} from 'lodash'\n\nimport {type ProblemPath, type ProblemPathPropertySegment, type TypeWithProblems} from './typedefs'\nimport {error} from './validation/createValidationResult'\n\n/**\n * @internal\n */\nexport function groupProblems(types: SchemaTypeDefinition[]): SchemaValidationProblemGroup[] {\n  return flatten<TypeWithProblems>(types.map((type) => getTypeProblems(type))).filter(\n    (type) => type.problems.length > 0,\n  )\n}\n\nfunction createTypeWithMembersProblemsAccessor(\n  memberPropertyName: string,\n  getMembers = (type: SchemaType) => get(type, memberPropertyName),\n) {\n  return function getProblems(type, parentPath: ProblemPath): TypeWithProblems[] {\n    const currentPath: ProblemPath = [\n      ...parentPath,\n      {kind: 'type', type: type.type, name: type.name},\n    ]\n\n    const members = getMembers(type) || []\n\n    const memberProblems: TypeWithProblems[][] = Array.isArray(members)\n      ? members.map((memberType) => {\n          const propertySegment: ProblemPathPropertySegment = {\n            kind: 'property',\n            name: memberPropertyName,\n          }\n          const memberPath: ProblemPath = [...currentPath, propertySegment]\n          return getTypeProblems(memberType, memberPath)\n        })\n      : [\n          [\n            {\n              path: currentPath,\n              problems: [error(`Member declaration (${memberPropertyName}) is not an array`)],\n            },\n          ],\n        ]\n\n    return [\n      {\n        path: currentPath,\n        problems: type._problems || [],\n      },\n      ...flatten(memberProblems),\n    ]\n  }\n}\n\nconst arrify = (val) => (Array.isArray(val) ? val : (typeof val === 'undefined' && []) || [val])\n\nconst getObjectProblems = createTypeWithMembersProblemsAccessor('fields')\nconst getImageProblems = createTypeWithMembersProblemsAccessor('fields')\nconst getFileProblems = createTypeWithMembersProblemsAccessor('fields')\nconst getArrayProblems = createTypeWithMembersProblemsAccessor('of')\nconst getReferenceProblems = createTypeWithMembersProblemsAccessor('to', (type) =>\n  'to' in type ? arrify(type.to) : [],\n)\nconst getBlockAnnotationProblems = createTypeWithMembersProblemsAccessor('marks.annotations')\nconst getBlockMemberProblems = createTypeWithMembersProblemsAccessor('of')\nconst getBlockProblems = (type, problems) => [\n  ...getBlockAnnotationProblems(type, problems),\n  ...getBlockMemberProblems(type, problems),\n]\n\nfunction getDefaultProblems(type, path = []): TypeWithProblems[] {\n  return [\n    {\n      path: [...path, {kind: 'type', type: type.type, name: type.name}],\n      problems: type._problems || [],\n    },\n  ]\n}\n\nfunction getTypeProblems(type: SchemaTypeDefinition, path = []): TypeWithProblems[] {\n  switch (type.type) {\n    case 'object': {\n      return getObjectProblems(type, path)\n    }\n    case 'document': {\n      return getObjectProblems(type, path)\n    }\n    case 'array': {\n      return getArrayProblems(type, path)\n    }\n    case 'reference': {\n      return getReferenceProblems(type, path)\n    }\n    case 'block': {\n      return getBlockProblems(type, path)\n    }\n    case 'image': {\n      return getImageProblems(type, path)\n    }\n    case 'file': {\n      return getFileProblems(type, path)\n    }\n    default: {\n      return getDefaultProblems(type, path)\n    }\n  }\n}\n","export function getDupes(array, selector = (v) => v) {\n  const dupes = array.reduce((acc, item) => {\n    const key = selector(item)\n    if (!acc[key]) {\n      acc[key] = []\n    }\n    acc[key].push(item)\n    return acc\n  }, {})\n\n  return Object.keys(dupes)\n    .map((key) => (dupes[key].length > 1 ? dupes[key] : null))\n    .filter(Boolean)\n}\n","import {flatten, uniq} from 'lodash'\n\nimport {getDupes} from '../sanity/validation/utils/getDupes'\n\ntype SchemaType = Record<string, any>\ntype SchemaTypeDef = Record<string, any>\n\ntype VisitContext = {\n  isRoot: boolean\n  isReserved: (typeName: string) => boolean\n  visit: Visitor\n  index: number\n  isDuplicate: (typeName: string) => boolean\n  getType: (typeName: string) => null | SchemaType\n  getTypeNames: () => Array<string>\n}\n\nexport type Visitor = (typeDef: SchemaTypeDef, arg1: VisitContext) => SchemaType\n\nconst NOOP_VISITOR: Visitor = (typeDef) => typeDef\n\nexport class UnknownType {\n  name: string\n\n  constructor(name: string) {\n    this.name = name\n  }\n}\n\nconst TYPE_TYPE = {name: 'type', type: null}\n\nconst FUTURE_RESERVED = ['any', 'time', 'date']\n\nexport function traverseSchema(\n  types: SchemaTypeDef[] = [],\n  coreTypes: SchemaTypeDef[] = [],\n  visitor: Visitor = NOOP_VISITOR,\n) {\n  const coreTypesRegistry = Object.create(null)\n  const registry = Object.create(null)\n\n  const coreTypeNames = coreTypes.map((typeDef) => typeDef.name)\n\n  const reservedTypeNames = FUTURE_RESERVED.concat(coreTypeNames)\n\n  const typeNames = types.map((typeDef) => typeDef && typeDef.name).filter(Boolean)\n\n  coreTypes.forEach((coreType) => {\n    coreTypesRegistry[coreType.name] = coreType\n  })\n\n  types.forEach((type, i) => {\n    // Allocate a placeholder for each type\n    registry[(type && type.name) || `__unnamed_${i}`] = {}\n  })\n\n  function getType(typeName) {\n    return typeName === 'type'\n      ? TYPE_TYPE\n      : coreTypesRegistry[typeName] || registry[typeName] || null\n  }\n\n  const duplicateNames = uniq(flatten(getDupes(typeNames)))\n\n  function isDuplicate(typeName) {\n    return duplicateNames.includes(typeName)\n  }\n  function getTypeNames() {\n    return typeNames.concat(coreTypeNames)\n  }\n  function isReserved(typeName) {\n    return typeName === 'type' || reservedTypeNames.includes(typeName)\n  }\n\n  const visitType = (isRoot) => (typeDef, index) => {\n    return visitor(typeDef, {\n      visit: visitType(false),\n      isRoot,\n      getType,\n      getTypeNames,\n      isReserved,\n      isDuplicate,\n      index,\n    })\n  }\n\n  coreTypes.forEach((coreTypeDef) => {\n    Object.assign(coreTypesRegistry[coreTypeDef.name], visitType(coreTypeDef))\n  })\n\n  types.forEach((typeDef, i) => {\n    Object.assign(\n      registry[(typeDef && typeDef.name) || `__unnamed_${i}`],\n      visitType(true)(typeDef, i),\n    )\n  })\n\n  return {\n    get(typeName: string) {\n      const res = registry[typeName] || coreTypesRegistry[typeName]\n      if (res) {\n        return res\n      }\n      throw new Error(`No such type: ${typeName}`)\n    },\n    has(typeName: string): boolean {\n      return typeName in registry || typeName in coreTypesRegistry\n    },\n    getTypeNames(): string[] {\n      return Object.keys(registry)\n    },\n    getTypes() {\n      return this.getTypeNames().map(this.get)\n    },\n    toJSON() {\n      return this.getTypes()\n    },\n  }\n}\n","const coreTypes = [\n  {name: 'array', jsonType: 'array', type: 'type'},\n  {name: 'block', jsonType: 'object', type: 'type'},\n  {name: 'boolean', jsonType: 'boolean', type: 'type'},\n  {name: 'datetime', jsonType: 'string', type: 'type'},\n  {name: 'date', jsonType: 'string', type: 'type'},\n  {name: 'document', jsonType: 'object', type: 'type'},\n  {name: 'email', jsonType: 'string', type: 'type'},\n  {name: 'file', jsonType: 'object', type: 'type'},\n  {name: 'geopoint', jsonType: 'object', type: 'type'},\n  {name: 'image', jsonType: 'object', type: 'type'},\n  {name: 'number', jsonType: 'number', type: 'type'},\n  {name: 'object', jsonType: 'object', type: 'type'},\n  {name: 'reference', jsonType: 'object', type: 'type'},\n  {name: 'crossDatasetReference', jsonType: 'object', type: 'type'},\n  {name: 'slug', jsonType: 'object', type: 'type'},\n  {name: 'span', jsonType: 'object', type: 'type'},\n  {name: 'string', jsonType: 'string', type: 'type'},\n  {name: 'telephone', jsonType: 'string', type: 'type'},\n  {name: 'text', jsonType: 'string', type: 'type'},\n  {name: 'url', jsonType: 'string', type: 'type'},\n] as const\n\nexport const coreTypeNames = coreTypes.map((t) => t.name)\nexport default coreTypes\n","import {traverseSchema, type Visitor} from '../core/traverseSchema'\nimport coreTypes from './coreTypes'\nimport {type _FIXME_} from './typedefs'\n\nexport function traverseSanitySchema(schemaTypes: _FIXME_[], visitor: Visitor) {\n  return traverseSchema(schemaTypes, coreTypes as _FIXME_, visitor)\n}\n","import humanizeList from 'humanize-list'\nimport {flatten, partition} from 'lodash'\n\nimport {coreTypeNames} from '../../coreTypes'\nimport {error, HELP_IDS, warning} from '../createValidationResult'\nimport {getDupes} from '../utils/getDupes'\n\nfunction isPrimitiveTypeName(typeName) {\n  return typeName === 'string' || typeName === 'number' || typeName === 'boolean'\n}\n\nfunction isAssignable(typeName, type) {\n  return (typeof type.name === 'string' ? type.name : type.type) === typeName\n}\n\nfunction quote(n) {\n  return `\"${n}\"`\n}\n\nfunction pluralize(arr: unknown[], suf = 's') {\n  return arr.length === 1 ? '' : suf\n}\n\nfunction format(value: unknown) {\n  if (Array.isArray(value)) {\n    return `array with ${value.length} entries`\n  }\n  if (typeof value === 'object' && value !== null) {\n    return `object with keys ${humanizeList(Object.keys(value).map(quote))}`\n  }\n  return quote(value)\n}\n\nexport default (typeDef, visitorContext) => {\n  // name should already have been marked\n  const ofIsArray = Array.isArray(typeDef.of)\n\n  if (ofIsArray) {\n    const invalid = typeDef.of.reduce((errs, def, idx) => {\n      if (typeof def.name === 'string') {\n        // If an array member has been given a \"local\" type name, we want to trigger an error if the given member type name\n        // is one of the builtin types\n        //\n        // The following examples should be an error (where book is an existing root level type and reference is a built-in type):\n        //  - (…) of: [{type: 'book', name: 'image'}]\n        //  - (…) of: [{type: 'book', name: 'object'}]\n        //  - (…) of: [{type: 'object', name: 'reference'}]\n        // The following examples are valid (where \"address\" is not defined as a global object type)\n        //  - (…) of: [{type: 'object', name: 'address'}]\n        // The following examples are redundant, but should be allowed (at least for now)\n        //  - (…) of: [{type: 'object', name: 'object'}]\n        //  - (…) of: [{type: 'image', name: 'image'}]\n\n        if (\n          // specifying the same name as the type is redundant, but should not be a hard error at this point\n          // Consider showing a warning for this and deprecate this ability eventually\n          def.name !== def.type &&\n          coreTypeNames.includes(def.name)\n        ) {\n          return errs.concat(\n            error(\n              `Found array member declaration with the same type name as a built-in type (\"${def.name}\"). Array members can not be given the same name as a built-in type.`,\n              HELP_IDS.ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT,\n            ),\n          )\n        }\n      }\n\n      if (def.type === 'object' && def.name && visitorContext.getType(def.name)) {\n        return errs.concat(\n          warning(\n            `Found array member declaration with the same name as the global schema type \"${def.name}\". It's recommended to use a unique name to avoid possibly incompatible data types that shares the same name.`,\n            HELP_IDS.ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT,\n          ),\n        )\n      }\n      if (def.type === 'array') {\n        return errs.concat(\n          error(\n            `Found array member declaration of type \"array\" - multidimensional arrays are not currently supported by Sanity`,\n            HELP_IDS.ARRAY_OF_ARRAY,\n          ),\n        )\n      }\n\n      if (def) {\n        return errs\n      }\n\n      const err = `Found ${def === null ? 'null' : typeof def}, expected member declaration`\n      return errs.concat(\n        error(\n          `Found invalid type member declaration in array at index ${idx}: ${err}`,\n          HELP_IDS.ARRAY_OF_INVALID,\n        ),\n      )\n    }, [])\n\n    if (invalid.length > 0) {\n      return {\n        ...typeDef,\n        of: [],\n        _problems: invalid,\n      }\n    }\n  }\n\n  const problems = flatten([\n    ofIsArray\n      ? getDupes(typeDef.of, (t) => `${t.name};${t.type}`).map((dupes) =>\n          error(\n            `Found ${dupes.length} members with same type, but not unique names \"${dupes[0].type}\" in array. This makes it impossible to tell their values apart and you should consider naming them`,\n            HELP_IDS.ARRAY_OF_NOT_UNIQUE,\n          ),\n        )\n      : error(\n          'The array type is missing or having an invalid value for the required \"of\" property',\n          HELP_IDS.ARRAY_OF_INVALID,\n        ),\n  ])\n  const of = ofIsArray ? typeDef.of : []\n\n  // Don't allow object types without a name in block arrays\n  const hasObjectTypesWithoutName = of.some(\n    (type) => type.type === 'object' && typeof type.name === 'undefined',\n  )\n  const hasBlockType = of.some((ofType) => ofType.type === 'block')\n  if (hasBlockType && hasObjectTypesWithoutName) {\n    problems.push(\n      error(\n        \"The array type's 'of' property can't have an object type without a 'name' property as member, when the 'block' type is also a member of that array.\",\n        HELP_IDS.ARRAY_OF_INVALID,\n      ),\n    )\n  }\n\n  const [primitiveTypes, objectTypes] = partition(\n    of,\n    (ofType) =>\n      isPrimitiveTypeName(ofType.type) ||\n      isPrimitiveTypeName(visitorContext.getType(ofType.type)?.jsonType),\n  )\n\n  const isMixedArray = primitiveTypes.length > 0 && objectTypes.length > 0\n\n  if (isMixedArray) {\n    const primitiveTypeNames = primitiveTypes.map((t) => t.type)\n    const objectTypeNames = objectTypes.map((t) => t.type)\n    problems.push(\n      error(\n        `The array type's 'of' property can't have both object types and primitive types (found primitive type ${pluralize(\n          primitiveTypeNames,\n        )} ${humanizeList(primitiveTypeNames.map(quote))} and object type${pluralize(\n          objectTypeNames,\n        )} ${humanizeList(objectTypeNames.map(quote))})`,\n        HELP_IDS.ARRAY_OF_INVALID,\n      ),\n    )\n  }\n\n  const list = typeDef?.options?.list\n  if (!isMixedArray && Array.isArray(list)) {\n    const isArrayOfPrimitives = primitiveTypes.length > 0\n    if (isArrayOfPrimitives) {\n      list.forEach((option) => {\n        const value = option?.value ?? option\n        const isDeclared = primitiveTypes.some((primitiveType) => {\n          return typeof value === visitorContext.getType(primitiveType.type).jsonType\n        })\n        if (!isDeclared) {\n          const formattedTypeList = humanizeList(\n            primitiveTypes.map((t) => t.name || t.type),\n            {conjunction: 'or'},\n          )\n          problems.push(\n            error(\n              `An invalid entry found in options.list: ${format(\n                value,\n              )}. Must be either a value of type ${formattedTypeList}, or an object with {title: string, value: ${formattedTypeList}}`,\n              HELP_IDS.ARRAY_PREDEFINED_CHOICES_INVALID,\n            ),\n          )\n        }\n      })\n    } else {\n      list.forEach((option) => {\n        const optionTypeName = option._type || 'object'\n        const isDeclared = objectTypes.some((validObjectType) =>\n          isAssignable(optionTypeName, validObjectType),\n        )\n        if (!isDeclared) {\n          problems.push(\n            error(\n              `An invalid entry found in options.list: ${format(\n                option,\n              )}. Must be an object with \"_type\" set to ${humanizeList(\n                objectTypes\n                  .map((t) => t.name || t.type)\n                  .map((t) => (t === 'object' ? 'undefined' : quote(t))),\n                {conjunction: 'or'},\n              )}`,\n              HELP_IDS.ARRAY_PREDEFINED_CHOICES_INVALID,\n            ),\n          )\n        }\n      })\n    }\n  }\n\n  if (typeDef?.options?.list && typeDef?.options?.layout === 'tags') {\n    problems.push(\n      warning(\n        'Found array member declaration with both tags layout and a list of predefined values. If you want to display a list of predefined values, remove the tags layout from `options`.',\n      ),\n    )\n  }\n\n  return {\n    ...typeDef,\n    of: of.map(visitorContext.visit),\n    _problems: problems,\n  }\n}\n","export function isJSONTypeOf(type, jsonType, visitorContext) {\n  if ('jsonType' in type) {\n    return type.jsonType === jsonType\n  }\n  const parentType = visitorContext.getType(type.type)\n  if (!parentType) {\n    throw new Error(`Could not resolve jsonType of ${type.name}. No parent type found`)\n  }\n  return isJSONTypeOf(parentType, jsonType, visitorContext)\n}\n","import humanizeList from 'humanize-list'\nimport {isPlainObject, omit} from 'lodash'\n\nimport {coreTypeNames} from '../../coreTypes'\nimport {error, HELP_IDS, warning} from '../createValidationResult'\nimport {isJSONTypeOf} from '../utils/isJSONTypeOf'\n\nconst getTypeOf = (thing) => (Array.isArray(thing) ? 'array' : typeof thing)\nconst quote = (str) => `\"${str}\"`\nconst allowedKeys = [\n  'components',\n  'lists',\n  'marks',\n  'name',\n  'of',\n  'options',\n  'styles',\n  'title',\n  'type',\n  'validation',\n]\nconst allowedMarkKeys = ['decorators', 'annotations']\nconst allowedStyleKeys = ['blockEditor', 'title', 'value', 'component']\nconst allowedDecoratorKeys = ['blockEditor', 'title', 'value', 'icon', 'component']\nconst allowedListKeys = ['title', 'value', 'icon', 'component']\nconst supportedBuiltInObjectTypes = ['file', 'image', 'object', 'reference']\n\nexport default function validateBlockType(typeDef, visitorContext) {\n  const problems = []\n  let styles = typeDef.styles\n  let lists = typeDef.lists\n  let marks = typeDef.marks\n  let members = typeDef.of\n\n  const disallowedKeys = Object.keys(typeDef).filter(\n    (key) => !allowedKeys.includes(key) && !key.startsWith('_'),\n  )\n\n  if (disallowedKeys.length > 0) {\n    problems.push(\n      error(\n        `Found unknown properties for block declaration: ${humanizeList(\n          disallowedKeys.map(quote),\n        )}`,\n      ),\n    )\n  }\n\n  if (marks) {\n    marks = validateMarks(typeDef.marks, visitorContext, problems)\n  }\n\n  if (styles) {\n    styles = validateStyles(styles, visitorContext, problems)\n  }\n\n  if (lists) {\n    lists = validateLists(lists, visitorContext, problems)\n  }\n\n  if (members) {\n    members = validateMembers(members, visitorContext, problems)\n  }\n  return {\n    ...omit(typeDef, disallowedKeys),\n    marks,\n    styles,\n    name: typeDef.name || typeDef.type,\n    of: members,\n    _problems: problems,\n  }\n}\n\nfunction validateMarks(marks, visitorContext, problems) {\n  let decorators = marks.decorators\n  let annotations = marks.annotations\n\n  if (!isPlainObject(marks)) {\n    problems.push(error(`\"marks\" declaration should be an object, got ${getTypeOf(marks)}`))\n    return problems\n  }\n\n  const disallowedMarkKeys = Object.keys(marks).filter(\n    (key) => !allowedMarkKeys.includes(key) && !key.startsWith('_'),\n  )\n\n  if (disallowedMarkKeys.length > 0) {\n    problems.push(\n      error(\n        `Found unknown properties for block declaration: ${humanizeList(\n          disallowedMarkKeys.map(quote),\n        )}`,\n      ),\n    )\n  }\n\n  if (decorators && !Array.isArray(decorators)) {\n    problems.push(\n      error(`\"marks.decorators\" declaration should be an array, got ${getTypeOf(decorators)}`),\n    )\n  } else if (decorators) {\n    decorators\n      .filter((dec) => !!dec.blockEditor)\n      .forEach((dec) => {\n        dec.icon = dec.blockEditor.icon\n        dec.component = dec.blockEditor.render\n      })\n    decorators = validateDecorators(decorators, visitorContext, problems)\n  }\n\n  if (annotations && !Array.isArray(annotations)) {\n    problems.push(\n      error(`\"marks.annotations\" declaration should be an array, got ${getTypeOf(annotations)}`),\n    )\n  } else if (annotations) {\n    annotations = validateAnnotations(annotations, visitorContext, problems)\n  }\n\n  return {...marks, decorators, annotations}\n}\n\nfunction validateLists(lists, visitorContext, problems) {\n  if (!Array.isArray(lists)) {\n    problems.push(error(`\"lists\" declaration should be an array, got ${getTypeOf(lists)}`))\n    return problems\n  }\n\n  lists.forEach((list, index) => {\n    if (!isPlainObject(list)) {\n      problems.push(error(`List must be an object, got ${getTypeOf(list)}`))\n      return\n    }\n\n    const name = list.value || `#${index}`\n    const disallowedKeys = Object.keys(list).filter(\n      (key) => !allowedListKeys.includes(key) && !key.startsWith('_'),\n    )\n\n    if (disallowedKeys.length > 0) {\n      problems.push(\n        error(\n          `Found unknown properties for list ${name}: ${humanizeList(disallowedKeys.map(quote))}`,\n        ),\n      )\n    }\n\n    if (!list.value) {\n      problems.push(error(`List #${index} is missing required \"value\" property`))\n    } else if (typeof list.value !== 'string') {\n      problems.push(\n        error(\n          `List type #${index} has an invalid \"value\" property, expected string, got ${getTypeOf(\n            list.value,\n          )}`,\n        ),\n      )\n    } else if (!list.title) {\n      problems.push(warning(`List type ${name} is missing recommended \"title\" property`))\n    }\n  })\n  return lists\n}\n\nfunction validateStyles(styles, visitorContext, problems) {\n  if (!Array.isArray(styles)) {\n    problems.push(error(`\"styles\" declaration should be an array, got ${getTypeOf(styles)}`))\n    return problems\n  }\n\n  styles.forEach((style, index) => {\n    if (!isPlainObject(style)) {\n      problems.push(error(`Style must be an object, got ${getTypeOf(style)}`))\n      return\n    }\n\n    const name = style.value || `#${index}`\n    const disallowedKeys = Object.keys(style).filter(\n      (key) => !allowedStyleKeys.includes(key) && !key.startsWith('_'),\n    )\n\n    if (disallowedKeys.length > 0) {\n      problems.push(\n        error(\n          `Found unknown properties for style ${name}: ${humanizeList(disallowedKeys.map(quote))}`,\n        ),\n      )\n    }\n\n    if (!style.value) {\n      problems.push(error(`Style #${index} is missing required \"value\" property`))\n    } else if (typeof style.value !== 'string') {\n      problems.push(\n        error(\n          `Style #${index} has an invalid \"value\" property, expected string, got ${getTypeOf(\n            style.value,\n          )}`,\n        ),\n      )\n    } else if (!style.title) {\n      problems.push(warning(`Style ${name} is missing recommended \"title\" property`))\n    }\n    if (typeof style.blockEditor !== 'undefined') {\n      problems.push(\n        warning(\n          `Style has deprecated key \"blockEditor\", please refer to the documentation on how to configure the block type for version 3.`,\n          HELP_IDS.DEPRECATED_BLOCKEDITOR_KEY,\n        ),\n      )\n      // TODO remove this backward compatibility at some point.\n      style.component = style.component || style.blockEditor.render\n    }\n  })\n  return styles\n}\n\nfunction validateDecorators(decorators, visitorContext, problems) {\n  decorators.forEach((decorator, index) => {\n    if (!isPlainObject(decorator)) {\n      problems.push(error(`Annotation must be an object, got ${getTypeOf(decorator)}`))\n      return\n    }\n\n    const name = decorator.value || `#${index}`\n    const disallowedKeys = Object.keys(decorator).filter(\n      (key) => !allowedDecoratorKeys.includes(key) && !key.startsWith('_'),\n    )\n\n    if (disallowedKeys.length > 0) {\n      problems.push(\n        error(\n          `Found unknown properties for decorator ${name}: ${humanizeList(\n            disallowedKeys.map(quote),\n          )}`,\n        ),\n      )\n    }\n\n    if (!decorator.value) {\n      problems.push(error(`Decorator #${index} is missing required \"value\" property`))\n    } else if (typeof decorator.value !== 'string') {\n      problems.push(\n        error(\n          `Decorator #${index} has an invalid \"value\" property, expected string, got ${getTypeOf(\n            decorator.value,\n          )}`,\n        ),\n      )\n    } else if (!decorator.title) {\n      problems.push(warning(`Decorator ${name} is missing recommended \"title\" property`))\n    }\n    if (typeof decorator.blockEditor !== 'undefined') {\n      problems.push(\n        warning(\n          `Decorator \"${name}\" has deprecated key \"blockEditor\", please refer to the documentation on how to configure the block type for version 3.`,\n          HELP_IDS.DEPRECATED_BLOCKEDITOR_KEY,\n        ),\n      )\n      // TODO remove this backward compatibility at some point.\n      decorator.icon = decorator.icon || decorator.blockEditor.icon\n      decorator.component = decorator.component || decorator.blockEditor.render\n    }\n  })\n  return decorators\n}\n\nfunction validateAnnotations(annotations, visitorContext, problems) {\n  return annotations.map((annotation) => {\n    if (!isPlainObject(annotation)) {\n      return {\n        ...annotation,\n        _problems: [error(`Annotation must be an object, got ${getTypeOf(annotation)}`)],\n      }\n    }\n\n    const {_problems} = visitorContext.visit(annotation, visitorContext)\n    const targetType = annotation.type && visitorContext.getType(annotation.type)\n    if (targetType && !isJSONTypeOf(targetType, 'object', visitorContext)) {\n      _problems.push(\n        error(\n          `Annotation cannot have type \"${annotation.type}\" - annotation types must inherit from object`,\n        ),\n      )\n    }\n\n    if (typeof annotation.blockEditor !== 'undefined') {\n      problems.push(\n        warning(\n          `Annotation has deprecated key \"blockEditor\", please refer to the documentation on how to configure the block type for version 3.`,\n          HELP_IDS.DEPRECATED_BLOCKEDITOR_KEY,\n        ),\n      )\n      // TODO remove this backward compatibility at some point.\n      annotation.icon = annotation.icon || annotation.blockEditor.icon\n      if (annotation.blockEditor?.render && !annotation.components?.annotation) {\n        annotation.components = annotation.components || {}\n        annotation.components.annotation =\n          annotation.components.annotation || annotation.blockEditor.render\n      }\n    }\n\n    return {...annotation, _problems}\n  })\n}\n\nfunction validateMembers(members, visitorContext, problems) {\n  if (!Array.isArray(members)) {\n    problems.push(error(`\"of\" declaration should be an array, got ${getTypeOf(members)}`))\n    return undefined\n  }\n\n  return members.map((member) => {\n    const {_problems} = visitorContext.visit(member, visitorContext)\n    if (member.type === 'object' && member.name && visitorContext.getType(member.name)) {\n      return {\n        ...member,\n        _problems: [\n          warning(\n            `Found array member declaration with the same name as the global schema type \"${member.name}\". It's recommended to use a unique name to avoid possibly incompatible data types that shares the same name.`,\n            HELP_IDS.ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT,\n          ),\n        ],\n      }\n    }\n\n    // Test that each member is of a support object-like type\n    let type = member\n    while (type && !type.jsonType) {\n      type = visitorContext.getType(type.type)\n    }\n    const nonObjectCoreTypes = coreTypeNames.filter((n) => !supportedBuiltInObjectTypes.includes(n))\n    if (\n      // Must be object-like type (to validate hoisted types)\n      (type && type.jsonType !== 'object') ||\n      // Can't be a core type, or core object type that isn't supported (like 'span')\n      nonObjectCoreTypes.some((coreName) => coreName === member.type)\n    ) {\n      return {\n        ...member,\n        _problems: [\n          error(\n            `Block member types must be a supported object-like type. The following built-in types are supported: '${supportedBuiltInObjectTypes.join(\n              \"', '\",\n            )}'. You can also use shorthands for previously defined object types like {type: 'myObjectType'}`,\n            HELP_IDS.ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT,\n          ),\n        ],\n      }\n    }\n    return {...member, _problems}\n  })\n}\n","import {type SchemaType} from '@sanity/types'\n\nimport {type SchemaValidationResult} from '../../typedefs'\nimport {error} from '../createValidationResult'\n\nexport function validateNonObjectFieldsProp(\n  typeDef: SchemaType,\n  visitorContext,\n): SchemaValidationResult[] {\n  if (!('fields' in typeDef)) {\n    return []\n  }\n\n  let type = typeDef\n  while (type && !type.jsonType) {\n    type = visitorContext.getType(type.type)\n  }\n\n  if (type && type.jsonType !== 'object') {\n    return [error(`Type has propery \"fields\", but is not an object/document type.`)]\n  }\n\n  return []\n}\n","import humanize from 'humanize-list'\nimport leven from 'leven'\n\nimport {error, HELP_IDS} from '../createValidationResult'\n\nconst quote = (str) => `\"${str}\"`\n\nexport function validateTypeName(typeName: string, visitorContext) {\n  const possibleTypeNames = visitorContext.getTypeNames()\n\n  if (!typeName) {\n    return [error(`Type is missing a type.`, HELP_IDS.TYPE_MISSING_TYPE)]\n  }\n\n  if (typeof typeName !== 'string') {\n    return [\n      error(\n        `Type has an invalid \"type\"-property - should be a string.`,\n        HELP_IDS.TYPE_MISSING_TYPE,\n      ),\n    ]\n  }\n\n  const isValid = possibleTypeNames.includes(typeName)\n\n  if (!isValid) {\n    const suggestions = possibleTypeNames\n      .map((possibleTypeName) => {\n        return [leven(typeName, possibleTypeName), possibleTypeName]\n      })\n      .filter(([distance]) => distance < 3)\n      .map(([_, name]) => name)\n\n    const suggestion =\n      suggestions.length > 0\n        ? ` Did you mean ${humanize(suggestions.map(quote), {conjunction: 'or'})}?`\n        : ''\n\n    return [error(`Unknown type: ${typeName}.${suggestion}`)]\n  }\n  return []\n}\n","import {type SchemaValidationResult} from '../../typedefs'\nimport {warning} from '../createValidationResult'\n\nexport function validateDeprecatedProperties(type): SchemaValidationResult[] {\n  const warnings = []\n\n  if (type?.inputComponent) {\n    warnings.push(\n      warning(`The \"inputComponent\" property is deprecated. Use \"components.input\" instead.`),\n    )\n  }\n\n  if (type?.preview?.component) {\n    warnings.push(\n      warning(`The \"preview.component\" property is deprecated. Use \"components.preview\" instead.`),\n    )\n  }\n\n  if (type?.diffComponent) {\n    warnings.push(\n      warning(`The \"diffComponent\" property is deprecated. Use \"components.diff\" instead.`),\n    )\n  }\n\n  if (type?.options?.editModal) {\n    warnings.push(\n      warning(`The \"options.editModal\" property is deprecated. Use \"options.modal\" instead.`),\n    )\n  }\n\n  if (type?.options?.isHighlighted) {\n    warnings.push(\n      warning(\n        `The \"options.isHighlighted\" property is deprecated. You can put fields behind a collapsed fieldset if you want to hide them from plain sight.`,\n      ),\n    )\n  }\n\n  return warnings\n}\n","import {validateNonObjectFieldsProp} from '../utils/validateNonObjectFieldsProp'\nimport {validateTypeName} from '../utils/validateTypeName'\nimport {validateDeprecatedProperties} from './deprecated'\n\nexport default (typeDef, visitorContext) => {\n  return {\n    ...typeDef,\n    _problems: [\n      ...validateTypeName(typeDef.type, visitorContext),\n      ...validateNonObjectFieldsProp(typeDef, visitorContext),\n      ...validateDeprecatedProperties(typeDef),\n    ].filter(Boolean),\n  }\n}\n","import {flatten, isPlainObject} from 'lodash'\n\nimport {type SchemaValidationResult} from '../../typedefs'\nimport {error, HELP_IDS} from '../createValidationResult'\nimport {getDupes} from '../utils/getDupes'\n\nfunction normalizeToProp(typeDef) {\n  if (Array.isArray(typeDef.to)) {\n    return typeDef.to\n  }\n  return typeDef.to ? [typeDef.to] : typeDef.to\n}\n\nconst VALID_DATASET = /^[a-z0-9~][-_a-z0-9]+$/\nexport function isValidDatasetName(name: string): string | true {\n  const isValid = name.length >= 2 && name.toLowerCase() === name && VALID_DATASET.test(name)\n  return (\n    isValid ||\n    `The provided dataset \"${name}\" doesn't look like a valid dataset. Dataset names must be more than 2 characters, can only contain lowercase characters, numbers, underscores and dashes and can not start with a dash or an underscore`\n  )\n}\n\nexport default (typeDef, visitorContext) => {\n  const isValidTo = Array.isArray(typeDef.to) || isPlainObject(typeDef.to)\n  const normalizedTo = normalizeToProp(typeDef)\n\n  const problems = flatten([\n    isValidTo\n      ? getDupes(normalizedTo, (t) => `${t.name};${t.type}`).map((dupes) =>\n          error(\n            `Found ${dupes.length} members with same type, but not unique names \"${dupes[0].type}\" in reference. This makes it impossible to tell their values apart and you should consider naming them`,\n            HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n          ),\n        )\n      : error(\n          'The cross dataset reference type is missing or having an invalid value for the required \"to\" property. It should be an array of accepted types.',\n          HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n        ),\n  ])\n\n  if (isValidTo && normalizedTo.length === 0) {\n    problems.push(\n      error(\n        'The cross dataset reference type should define at least one referenced type. Please check the \"to\" property.',\n        HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n      ),\n    )\n  }\n\n  normalizedTo.forEach((crossDatasetTypeDef, index) => {\n    if (!crossDatasetTypeDef.type) {\n      problems.push(\n        error(\n          `The referenced type at index ${index} must be named. Specify the name of the type you want to create references to.`,\n          HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n        ),\n      )\n    }\n\n    if (!isPlainObject(crossDatasetTypeDef.preview)) {\n      problems.push(\n        error(\n          `Missing required preview config for the referenced type \"${\n            crossDatasetTypeDef.type || '<unknown type>'\n          }\"`,\n          HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n        ),\n      )\n    }\n  })\n\n  if (typeof typeDef.dataset === 'string') {\n    const datasetValidation = isValidDatasetName(typeDef.dataset)\n    if (datasetValidation !== true) {\n      problems.push(error(datasetValidation, HELP_IDS.CROSS_DATASET_REFERENCE_INVALID))\n    }\n  } else {\n    problems.push(\n      error(\n        'A cross dataset reference must specify a `dataset`',\n        HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n      ),\n    )\n  }\n\n  if (typeDef.studioUrl && typeof typeDef.studioUrl !== 'function') {\n    problems.push(\n      error(\n        'The \"studioUrl\" property on a cross dataset reference must be a function taking \"{id, type}\" as argument and returning a studio url.',\n        HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n      ),\n    )\n  }\n\n  problems.push(...getOptionErrors(typeDef))\n\n  return {\n    ...typeDef,\n    _problems: problems,\n  }\n}\n\nfunction getOptionErrors(typeDef: any): SchemaValidationResult[] {\n  const {options} = typeDef\n  const problems = [] as SchemaValidationResult[]\n\n  problems.push(\n    ...['filter', 'filterParams']\n      .filter((key) => key in typeDef)\n      .map((key) =>\n        error(\n          `\\`${key}\\` is not allowed on a reference type definition - did you mean \\`options.${key}\\`?`,\n          HELP_IDS.REFERENCE_INVALID_OPTIONS_LOCATION,\n        ),\n      ),\n  )\n\n  if (!options) {\n    return problems\n  }\n\n  if (!isPlainObject(options)) {\n    return problems.concat(\n      error(\n        'The reference type expects `options` to be an object',\n        HELP_IDS.REFERENCE_INVALID_OPTIONS,\n      ),\n    )\n  }\n\n  if (typeof options.filter === 'function' && typeof options.filterParams !== 'undefined') {\n    return problems.concat(\n      error(\n        '`filterParams` cannot be used if `filter` is a function. Either statically define `filter` as a string, or return `params` from the `filter`-function.',\n        HELP_IDS.REFERENCE_INVALID_FILTER_PARAMS_COMBINATION,\n      ),\n    )\n  }\n\n  if (typeof options.filter === 'function' || (!options.filter && !options.filterParams)) {\n    return problems\n  }\n\n  if (typeof options.filter !== 'string') {\n    return problems.concat(\n      error(`If set, \\`filter\\` must be a string. Got ${typeof options.filter}`),\n    )\n  }\n\n  if (typeof options.filterParams !== 'undefined' && !isPlainObject(options.filterParams)) {\n    return problems.concat(error(`If set, \\`filterParams\\` must be an object.`))\n  }\n\n  if (options.filterParams) {\n    return problems.concat(\n      Object.keys(options.filterParams)\n        .filter((key) => key.startsWith('__') || key.startsWith('$'))\n        .map((key) => error(`Filter parameter cannot be prefixed with \"$\" or \"__\". Got ${key}\".`)),\n    )\n  }\n\n  return problems\n}\n","const REACT_SYM_RE = /^Symbol\\(react\\..+\\)$/\n\nexport function isComponentLike(value: any) {\n  const type = typeof value\n  // Note: we're not using `isValidElementType` from react-is here since it accepts too much, e.g. any strings.\n  return (\n    type === 'function' ||\n    (typeof value?.$$typeof === 'symbol' && REACT_SYM_RE.test(String(value?.$$typeof)))\n  )\n}\n","import inspect from '../../inspect'\nimport {type SchemaValidationResult} from '../../typedefs'\nimport {warning} from '../createValidationResult'\nimport {isComponentLike} from './isComponent'\n\nexport function validateComponent(typeDef: any): SchemaValidationResult[] {\n  const components = 'components' in typeDef ? typeDef.components : false\n  if (!components) {\n    return []\n  }\n\n  const warnings: SchemaValidationResult[] = []\n\n  if (components.input && !isComponentLike(components.input)) {\n    warnings.push(\n      warning(\n        `The \\`components.input\\` property is set but does not appear to be a valid React component (expected a function, but saw ${inspect(\n          components.input,\n        )}). If you have imported a custom input component, please verify that you have imported the correct named/default export.`,\n      ),\n    )\n  }\n\n  if (components.field && !isComponentLike(components.field)) {\n    warnings.push(\n      warning(\n        `The \\`components.field\\` property is set but does not appear to be a valid React component (expected a function, but saw ${inspect(\n          components.field,\n        )}). If you have imported a custom field component, please verify that you have imported the correct named/default export.`,\n      ),\n    )\n  }\n\n  if (components.item && !isComponentLike(components.item)) {\n    warnings.push(\n      warning(\n        `The \\`components.item\\` property is set but does not appear to be a valid React component (expected a function, but saw ${inspect(\n          components.item,\n        )}). If you have imported a custom item component, please verify that you have imported the correct named/default export.`,\n      ),\n    )\n  }\n\n  if (components.preview && !isComponentLike(components.preview)) {\n    warnings.push(\n      warning(\n        `The \\`components.preview\\` property is set but does not appear to be a valid React component (expected a function, but saw ${inspect(\n          components.preview,\n        )}). If you have imported a custom preview component, please verify that you have imported the correct named/default export.`,\n      ),\n    )\n  }\n\n  return warnings\n}\n","import {isPlainObject} from 'lodash'\n\nimport inspect from '../../inspect'\nimport {error, HELP_IDS, warning} from '../createValidationResult'\nimport {validateComponent} from '../utils/validateComponent'\n\nconst VALID_FIELD_RE = /^[A-Za-z]+[0-9A-Za-z_]*$/\nconst CONVENTIONAL_FIELD_RE = /^[A-Za-z_]+[0-9A-Za-z_]*$/\ninterface Field {\n  name: string\n}\n\ninterface PreviewConfig {\n  select?: {\n    [key: string]: string\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  prepare?: Function\n}\n\nfunction validateFieldName(name): Array<any> {\n  if (typeof name !== 'string') {\n    return [\n      error(\n        `Field names must be strings. Saw \"${inspect(name)}\"`,\n        HELP_IDS.OBJECT_FIELD_NAME_INVALID,\n      ),\n    ]\n  }\n  if (name.startsWith('_')) {\n    return [\n      error(\n        `Invalid field name \"${name}\". Field names cannot start with underscores \"_\" as it's reserved for system fields.`,\n        HELP_IDS.OBJECT_FIELD_NAME_INVALID,\n      ),\n    ]\n  }\n\n  if (!VALID_FIELD_RE.test(name)) {\n    return [\n      error(\n        `Invalid field name: \"${name}\". Fields can only contain characters from A-Z, numbers and underscores and should not start with a number (must pass the regular expression ${String(\n          VALID_FIELD_RE,\n        )}).`,\n        HELP_IDS.OBJECT_FIELD_NAME_INVALID,\n      ),\n    ]\n  }\n  if (!CONVENTIONAL_FIELD_RE.test(name)) {\n    return [\n      warning(\n        'Thats an interesting field name for sure! But it is... how to put it... a bit... unconventional?' +\n          ' It may be wise to keep special characters out of field names for easier access later on.',\n      ),\n      HELP_IDS.OBJECT_FIELD_NAME_INVALID,\n    ]\n  }\n  return []\n}\n\nexport function validateField(field, _visitorContext) {\n  if (!isPlainObject(field)) {\n    return [\n      error(\n        `Incorrect type for field definition - should be an object, saw ${inspect(field)}`,\n        HELP_IDS.OBJECT_FIELD_DEFINITION_INVALID_TYPE,\n      ),\n    ]\n  }\n\n  const problems = []\n  problems.push(\n    ...('name' in field\n      ? validateFieldName(field.name)\n      : [error('Missing field name', HELP_IDS.OBJECT_FIELD_NAME_INVALID)]),\n  )\n  problems.push(...validateComponent(field))\n  return problems\n}\n\nfunction getDuplicateFields(array: Array<Field>): Array<Array<Field>> {\n  const dupes: {[name: string]: Array<Field>} = {}\n  array.forEach((field) => {\n    if (!dupes[field.name]) {\n      dupes[field.name] = []\n    }\n    dupes[field.name].push(field)\n  })\n  return Object.keys(dupes)\n    .map((fieldName) => (dupes[fieldName].length > 1 ? dupes[fieldName] : null))\n    .filter(Boolean)\n}\n\nexport function validateFields(fields: any, options = {allowEmpty: false}) {\n  const problems = []\n  const fieldsIsArray = Array.isArray(fields)\n  if (!fieldsIsArray) {\n    return [\n      error(\n        `The \"fields\" property must be an array of fields. Instead saw \"${typeof fields}\"`,\n        HELP_IDS.OBJECT_FIELDS_INVALID,\n      ),\n    ]\n  }\n\n  const fieldsWithNames = fields.filter((field) => typeof field.name === 'string')\n\n  getDuplicateFields(fieldsWithNames).forEach((dupes) => {\n    problems.push(\n      error(\n        `Found ${dupes.length} fields with name \"${dupes[0].name}\" in object`,\n        HELP_IDS.OBJECT_FIELD_NOT_UNIQUE,\n      ),\n    )\n  })\n\n  if (fields.length === 0 && !options.allowEmpty) {\n    problems.push(error('Object should have at least one field', HELP_IDS.OBJECT_FIELDS_INVALID))\n  }\n\n  const standaloneBlockFields = fields\n    .filter((field) => field.type === 'block')\n    .map((field) => `\"${field.name}\"`)\n\n  if (standaloneBlockFields.length > 0) {\n    const fmtFields = standaloneBlockFields.join(', ')\n    problems.push(\n      error(\n        `Invalid standalone block field(s) ${fmtFields}. Block content must be defined as an array of blocks`,\n        HELP_IDS.STANDALONE_BLOCK_TYPE,\n      ),\n    )\n  }\n\n  return problems\n}\n\nexport function validatePreview(preview: PreviewConfig) {\n  if (!isPlainObject(preview)) {\n    return [error(`The \"preview\" property must be an object, instead saw \"${typeof preview}\"`)]\n  }\n\n  if (typeof preview.prepare !== 'undefined' && typeof preview.prepare !== 'function') {\n    return [\n      error(\n        `The \"preview.prepare\" property must be a function, instead saw \"${typeof preview.prepare}\"`,\n      ),\n    ]\n  }\n\n  if (!preview.select) {\n    return []\n  }\n\n  if (!isPlainObject(preview.select)) {\n    return [\n      error(\n        `The \"preview.select\" property must be an object, instead saw \"${typeof preview.prepare}\"`,\n      ),\n    ]\n  }\n\n  return Object.keys(preview.select).reduce((errs, key) => {\n    return typeof preview.select[key] === 'string'\n      ? errs\n      : errs.concat(\n          error(\n            `The key \"${key}\" of \"preview.select\" must be a string, instead saw \"${typeof preview\n              .select[key]}\"`,\n          ),\n        )\n  }, [])\n}\n\nexport default (typeDef, visitorContext) => {\n  let problems = validateFields(typeDef.fields)\n\n  let preview = typeDef.preview\n  if (preview) {\n    const previewErrors = validatePreview(typeDef.preview)\n    problems = problems.concat(previewErrors)\n    preview = previewErrors.some((err) => err.severity === 'error') ? {} : preview\n  }\n\n  if (\n    typeDef.type !== 'document' &&\n    typeDef.type !== 'object' &&\n    typeof typeDef.initialValue !== 'undefined'\n  ) {\n    problems.push(\n      error(`The \"initialValue\" property is currently only supported for document & object types.`),\n    )\n  }\n\n  return {\n    ...typeDef,\n    preview,\n    fields: (Array.isArray(typeDef.fields) ? typeDef.fields : []).map((field, index) => {\n      const {name, ...fieldTypeDef} = field\n      const {_problems, ...fieldType} = visitorContext.visit(fieldTypeDef, index)\n      return {\n        name,\n        ...fieldType,\n        _problems: validateField(field, visitorContext).concat(_problems || []),\n      }\n    }),\n    _problems: problems,\n  }\n}\n","import {isPlainObject} from 'lodash'\n\nimport {error} from '../createValidationResult'\nimport object from './object'\n\nexport default (typeDefinition, visitorContext) => {\n  const typeDef = object(typeDefinition, visitorContext)\n  const {initialValue, initialValues} = typeDef\n\n  const hasInitialValue = typeof initialValue !== 'undefined'\n  if (hasInitialValue && !isPlainObject(initialValue) && typeof initialValue !== 'function') {\n    typeDef._problems.push(\n      error(`The \"initialValue\" property must be either a plain object or a function`),\n    )\n  }\n\n  if (typeof initialValues !== 'undefined') {\n    typeDef._problems.push(error(`Found property \"initialValues\" - did you mean \"initialValue\"?`))\n  }\n\n  return typeDef\n}\n","import {error, HELP_IDS} from '../createValidationResult'\nimport {validateField, validateFields} from './object'\n\nexport default (typeDef, visitorContext) => {\n  const problems = []\n  const fields = typeDef.fields\n\n  if (fields) {\n    problems.push(...validateFields(fields, {allowEmpty: true}))\n  }\n\n  const invalidFieldNames = Array.isArray(fields)\n    ? fields?.filter((field) => field.name === 'asset')\n    : []\n\n  if (\n    typeDef.options &&\n    typeof typeDef.options.metadata !== 'undefined' &&\n    !Array.isArray(typeDef.options.metadata)\n  ) {\n    problems.push(\n      error(\n        `Invalid type for file \\`metadata\\` field - must be an array of strings`,\n        HELP_IDS.ASSET_METADATA_FIELD_INVALID,\n      ),\n    )\n  } else if (invalidFieldNames.length > 0) {\n    problems.push(error('The name `asset` is not a valid field name for type `file`.'))\n  }\n\n  return {\n    ...typeDef,\n    fields: (Array.isArray(fields) ? fields : []).map((field, index) => {\n      const {name, ...fieldTypeDef} = field\n      const {_problems, ...fieldType} = visitorContext.visit(fieldTypeDef, index)\n      return {\n        name,\n        ...fieldType,\n        _problems: validateField(field, visitorContext).concat(_problems || []),\n      }\n    }),\n    _problems: problems,\n  }\n}\n","import {error, HELP_IDS, warning} from '../createValidationResult'\nimport {validateField, validateFields} from './object'\n\nconst autoMeta = ['dimensions', 'hasAlpha', 'isOpaque']\n\nexport default (typeDef, visitorContext) => {\n  const problems = []\n  const fields = typeDef.fields\n\n  if (fields) {\n    problems.push(...validateFields(fields, {allowEmpty: true}))\n  }\n\n  let options = typeDef.options\n  const metadata = options?.metadata\n  const superfluousMeta = Array.isArray(metadata)\n    ? metadata.filter((meta) => autoMeta.includes(meta))\n    : []\n\n  const invalidFieldNames = ['asset', 'hotspot', 'crop']\n\n  const fieldsWithInvalidName = Array.isArray(fields)\n    ? fields?.filter((field) => invalidFieldNames.includes(field.name))\n    : []\n\n  if (typeof metadata !== 'undefined' && !Array.isArray(metadata)) {\n    problems.push(\n      error(\n        `Invalid type for image \\`metadata\\` field - must be an array of strings`,\n        HELP_IDS.ASSET_METADATA_FIELD_INVALID,\n      ),\n    )\n  } else if (superfluousMeta.length > 0) {\n    problems.push(\n      warning(\n        `Image \\`metadata\\` field contains superfluous properties (they are always included): ${superfluousMeta.join(\n          ', ',\n        )}`,\n      ),\n    )\n    options = {...options, metadata: metadata.filter((meta) => !autoMeta.includes(meta))}\n  } else if (fieldsWithInvalidName.length > 0) {\n    problems.push(\n      error(\n        `The names \\`${invalidFieldNames.join(\n          '`, `',\n        )}\\` are invalid field names for type \\`image\\`.`,\n      ),\n    )\n  }\n\n  return {\n    ...typeDef,\n    options,\n    fields: (Array.isArray(fields) ? fields : []).map((field, index) => {\n      const {name, ...fieldTypeDef} = field\n      const {_problems, ...fieldType} = visitorContext.visit(fieldTypeDef, index)\n      return {\n        name,\n        ...fieldType,\n        _problems: validateField(field, visitorContext).concat(_problems || []),\n      }\n    }),\n    _problems: problems,\n  }\n}\n","import {flatten, isPlainObject} from 'lodash'\n\nimport {type SchemaValidationResult} from '../../typedefs'\nimport {error, HELP_IDS} from '../createValidationResult'\nimport {getDupes} from '../utils/getDupes'\n\nfunction normalizeToProp(typeDef) {\n  if (Array.isArray(typeDef.to)) {\n    return typeDef.to\n  }\n  return typeDef.to ? [typeDef.to] : typeDef.to\n}\n\nexport default (typeDef, visitorContext) => {\n  const isValidTo = Array.isArray(typeDef.to) || isPlainObject(typeDef.to)\n  const normalizedTo = normalizeToProp(typeDef)\n\n  const problems = flatten([\n    isValidTo\n      ? getDupes(normalizedTo, (t) => `${t.name};${t.type}`).map((dupes) =>\n          error(\n            `Found ${dupes.length} members with same type, but not unique names \"${dupes[0].type}\" in reference. This makes it impossible to tell their values apart and you should consider naming them`,\n            HELP_IDS.REFERENCE_TO_INVALID,\n          ),\n        )\n      : error(\n          'The reference type is missing or having an invalid value for the required \"to\" property. It should be an array of accepted types.',\n          HELP_IDS.REFERENCE_TO_INVALID,\n        ),\n  ])\n\n  if (isValidTo && normalizedTo.length === 0) {\n    problems.push(\n      error(\n        'The reference type should define at least one accepted type. Please check the \"to\" property.',\n        HELP_IDS.REFERENCE_TO_INVALID,\n      ),\n    )\n  }\n\n  problems.push(...getOptionErrors(typeDef))\n\n  return {\n    ...typeDef,\n    to: (isValidTo ? normalizedTo : []).map(visitorContext.visit),\n    _problems: problems,\n  }\n}\n\nfunction getOptionErrors(typeDef: any): SchemaValidationResult[] {\n  const {options} = typeDef\n  const problems = [] as SchemaValidationResult[]\n\n  problems.push(\n    ...['filter', 'filterParams']\n      .filter((key) => key in typeDef)\n      .map((key) =>\n        error(\n          `\\`${key}\\` is not allowed on a reference type definition - did you mean \\`options.${key}\\`?`,\n          HELP_IDS.REFERENCE_INVALID_OPTIONS_LOCATION,\n        ),\n      ),\n  )\n\n  if (!options) {\n    return problems\n  }\n\n  if (!isPlainObject(options)) {\n    return problems.concat(\n      error(\n        'The reference type expects `options` to be an object',\n        HELP_IDS.REFERENCE_INVALID_OPTIONS,\n      ),\n    )\n  }\n\n  if (typeof options.filter === 'function' && typeof options.filterParams !== 'undefined') {\n    return problems.concat(\n      error(\n        '`filterParams` cannot be used if `filter` is a function. Either statically define `filter` as a string, or return `params` from the `filter`-function.',\n        HELP_IDS.REFERENCE_INVALID_FILTER_PARAMS_COMBINATION,\n      ),\n    )\n  }\n\n  if (typeof options.filter === 'function' || (!options.filter && !options.filterParams)) {\n    return problems\n  }\n\n  if (typeof options.filter !== 'string') {\n    return problems.concat(\n      error(`If set, \\`filter\\` must be a string. Got ${typeof options.filter}`),\n    )\n  }\n\n  if (typeof options.filterParams !== 'undefined' && !isPlainObject(options.filterParams)) {\n    return problems.concat(error(`If set, \\`filterParams\\` must be an object.`))\n  }\n\n  if (options.filterParams) {\n    return problems.concat(\n      Object.keys(options.filterParams)\n        .filter((key) => key.startsWith('__') || key.startsWith('$'))\n        .map((key) => error(`Filter parameter cannot be prefixed with \"$\" or \"__\". Got ${key}\".`)),\n    )\n  }\n\n  return problems\n}\n","import {error, HELP_IDS, warning} from '../createValidationResult'\nimport {validateComponent} from '../utils/validateComponent'\n\nexport default (typeDef, visitorContext) => {\n  const hasName = Boolean(typeDef.name)\n  if (!hasName && Object.keys(typeDef).length === 1) {\n    // Short-circuit on obviously invalid types (only key is _problems)\n    return {\n      ...typeDef,\n      _problems: [\n        error(\n          'Invalid/undefined type declaration, check declaration or the import/export of the schema type.',\n          HELP_IDS.TYPE_INVALID,\n        ),\n      ],\n    }\n  }\n\n  const problems = []\n  if (looksLikeEsmModule(typeDef)) {\n    problems.push(\n      error(\n        'Type appears to be an ES6 module imported through CommonJS require - use an import statement or access the `.default` property',\n        HELP_IDS.TYPE_IS_ESM_MODULE,\n      ),\n    )\n  } else if (!hasName) {\n    problems.push(error('Missing type name', HELP_IDS.TYPE_MISSING_NAME))\n  } else if (visitorContext.isReserved(typeDef.name)) {\n    problems.push(\n      error(\n        `Invalid type name: \"${typeDef.name}\" is a reserved name.`,\n        HELP_IDS.TYPE_NAME_RESERVED,\n      ),\n    )\n  }\n\n  if (visitorContext.isDuplicate(typeDef.name)) {\n    problems.push(\n      error(\n        `Invalid type name: A type with name \"${typeDef.name}\" is already defined in the schema.`,\n      ),\n    )\n  }\n\n  problems.push(...validateComponent(typeDef))\n\n  if ('title' in typeDef && typeof typeDef.title !== 'string') {\n    problems.push(warning('Type title is not a string.', HELP_IDS.TYPE_TITLE_INVALID))\n  }\n  return {\n    ...typeDef,\n    _problems: problems,\n  }\n}\n\nfunction looksLikeEsmModule(typeDef) {\n  return !typeDef.name && typeDef.default && (typeDef.default.name || typeDef.default.title)\n}\n","import {HELP_IDS, warning} from '../createValidationResult'\n\nexport default (typeDef, visitorContext) => {\n  const problems = []\n\n  if (typeDef.options && typeDef.options.slugifyFn) {\n    problems.push(\n      warning(\n        'Heads up! The \"slugifyFn\" option has been renamed to \"slugify\".',\n        HELP_IDS.SLUG_SLUGIFY_FN_RENAMED,\n      ),\n    )\n\n    typeDef.options.slugify = typeDef.options.slugifyFn\n  }\n\n  return {\n    ...typeDef,\n    _problems: problems,\n  }\n}\n","import {traverseSanitySchema} from './traverseSchema'\nimport {type _FIXME_} from './typedefs'\nimport array from './validation/types/array'\nimport block from './validation/types/block'\nimport common from './validation/types/common'\nimport crossDatasetReference from './validation/types/crossDatasetReference'\nimport documentVisitor from './validation/types/document'\nimport file from './validation/types/file'\nimport image from './validation/types/image'\nimport object from './validation/types/object'\nimport reference from './validation/types/reference'\nimport rootType from './validation/types/rootType'\nimport slug from './validation/types/slug'\n\nconst typeVisitors = {\n  array,\n  object,\n  slug,\n  file,\n  image,\n  block,\n  document: documentVisitor,\n  reference: reference,\n  crossDatasetReference: crossDatasetReference,\n}\n\nconst getNoopVisitor = (visitorContext) => (schemaDef) => ({\n  name: `<unnamed_type_@_index_${visitorContext.index}>`,\n  ...schemaDef,\n  _problems: [],\n})\n\nfunction combine(...visitors) {\n  return (schemaType, visitorContext) => {\n    return visitors.reduce(\n      (result, visitor) => {\n        const res = visitor(result, visitorContext)\n        return {\n          ...res,\n          _problems: result._problems.concat(res._problems),\n        }\n      },\n      {_problems: [], ...schemaType},\n    )\n  }\n}\n\n/**\n * @internal\n */\nexport function validateSchema(schemaTypes: _FIXME_) {\n  return traverseSanitySchema(schemaTypes, (schemaDef, visitorContext) => {\n    const typeVisitor =\n      (schemaDef && schemaDef.type && typeVisitors[schemaDef.type]) ||\n      getNoopVisitor(visitorContext)\n\n    if (visitorContext.isRoot) {\n      return combine(rootType, common, typeVisitor)(schemaDef, visitorContext)\n    }\n\n    return combine(common, typeVisitor)(schemaDef, visitorContext)\n  })\n}\n"],"names":["ACTIONS_FLAG","DEFAULT_ACTIONS","VALID_ACTIONS","readActions","schemaType","validateActions","typeName","actions","Array","isArray","Error","concat","join","invalid","difference","length","resolveEnabledActions","name","isActionEnabled","action","includes","documentDefaultFields","_id","type","value","_type","_createdAt","_updatedAt","_rev","typesMap","Map","extractSchema","schemaDef","extractOptions","arguments","undefined","inlineFields","Set","schema","sortedSchemaTypeNames","sortByDependencies","forEach","get","base","convertBaseType","add","push","jsonType","isObjectType","defaultAttributes","object","createObject","attributes","convertSchemaType","_a","_b","_c","lastType","createReferenceTypeNode","has","isStringType","createStringTypeNodeDefintion","isNumberType","createNumberTypeNodeDefintion","isCrossDatasetReferenceType","isReferenceType","createReferenceTypeNodeDefintion","isArrayType","createArray","fields","gatherFields","field","fieldIsRequired","isFieldRequired","optional","enforceRequiredFields","Object","keys","arraySchemaType","of","item","_key","createKeyField","rest","validation","rules","rule","required","proxy","Proxy","target","methodName","typeDef","isType","stringSchemaType","options","list","map","v","numberSchemaType","reference","references","gatherReferenceNames","allReferences","gatherReferenceTypes","ref","refTo","to","compiledSchema","seen","walkDependencies","dependencies","schemaTypeName","dependencyMap","getTypeNames","set","typeNames","currentlyVisiting","visited","visit","deps","dep","delete","unshift","HELP_IDS","TYPE_INVALID","TYPE_IS_ESM_MODULE","TYPE_NAME_RESERVED","TYPE_MISSING_NAME","TYPE_MISSING_TYPE","TYPE_TITLE_RECOMMENDED","TYPE_TITLE_INVALID","OBJECT_FIELDS_INVALID","OBJECT_FIELD_NOT_UNIQUE","OBJECT_FIELD_NAME_INVALID","OBJECT_FIELD_DEFINITION_INVALID_TYPE","ARRAY_PREDEFINED_CHOICES_INVALID","ARRAY_OF_ARRAY","ARRAY_OF_INVALID","ARRAY_OF_NOT_UNIQUE","ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT","ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT","REFERENCE_TO_INVALID","REFERENCE_TO_NOT_UNIQUE","REFERENCE_INVALID_OPTIONS","REFERENCE_INVALID_OPTIONS_LOCATION","REFERENCE_INVALID_FILTER_PARAMS_COMBINATION","SLUG_SLUGIFY_FN_RENAMED","ASSET_METADATA_FIELD_INVALID","CROSS_DATASET_REFERENCE_INVALID","DEPRECATED_BLOCKEDITOR_KEY","STANDALONE_BLOCK_TYPE","createValidationResult","severity","message","helpId","some","id","error","warning","groupProblems","types","flatten","getTypeProblems","filter","problems","createTypeWithMembersProblemsAccessor","memberPropertyName","getMembers","getProblems","parentPath","currentPath","kind","members","memberProblems","memberType","propertySegment","memberPath","path","_problems","arrify","val","getObjectProblems","getImageProblems","getFileProblems","getArrayProblems","getReferenceProblems","getBlockAnnotationProblems","getBlockMemberProblems","getBlockProblems","getDefaultProblems","getDupes","array","selector","dupes","reduce","acc","key","Boolean","NOOP_VISITOR","TYPE_TYPE","FUTURE_RESERVED","traverseSchema","coreTypes","visitor","coreTypesRegistry","create","registry","coreTypeNames","reservedTypeNames","coreType","i","getType","duplicateNames","uniq","isDuplicate","isReserved","visitType","isRoot","index","coreTypeDef","assign","res","getTypes","toJSON","t","traverseSanitySchema","schemaTypes","isPrimitiveTypeName","isAssignable","quote","n","pluralize","arr","suf","format","visitorContext","ofIsArray","errs","def","idx","err","hasObjectTypesWithoutName","hasBlockType","ofType","primitiveTypes","objectTypes","partition","isMixedArray","primitiveTypeNames","objectTypeNames","humanizeList","isArrayOfPrimitives","option","isDeclared","primitiveType","formattedTypeList","conjunction","optionTypeName","validObjectType","layout","isJSONTypeOf","parentType","getTypeOf","thing","str","allowedKeys","allowedMarkKeys","allowedStyleKeys","allowedDecoratorKeys","allowedListKeys","supportedBuiltInObjectTypes","validateBlockType","styles","lists","marks","disallowedKeys","startsWith","validateMarks","validateStyles","validateLists","validateMembers","omit","decorators","annotations","isPlainObject","disallowedMarkKeys","dec","blockEditor","icon","component","render","validateDecorators","validateAnnotations","title","style","decorator","annotation","targetType","components","member","nonObjectCoreTypes","coreName","validateNonObjectFieldsProp","validateTypeName","possibleTypeNames","isValid","suggestions","possibleTypeName","leven","_ref","distance","_ref2","_","suggestion","humanize","validateDeprecatedProperties","warnings","inputComponent","preview","diffComponent","editModal","isHighlighted","common","normalizeToProp","VALID_DATASET","isValidDatasetName","toLowerCase","test","crossDatasetReference","isValidTo","normalizedTo","crossDatasetTypeDef","dataset","datasetValidation","studioUrl","getOptionErrors","filterParams","REACT_SYM_RE","isComponentLike","$$typeof","String","validateComponent","input","inspect","VALID_FIELD_RE","CONVENTIONAL_FIELD_RE","validateFieldName","validateField","_visitorContext","getDuplicateFields","fieldName","validateFields","allowEmpty","fieldsIsArray","fieldsWithNames","standaloneBlockFields","fmtFields","validatePreview","prepare","select","previewErrors","initialValue","fieldTypeDef","fieldType","documentVisitor","typeDefinition","initialValues","hasInitialValue","file","invalidFieldNames","metadata","autoMeta","image","superfluousMeta","meta","fieldsWithInvalidName","rootType","hasName","looksLikeEsmModule","default","slug","slugifyFn","slugify","typeVisitors","block","document","getNoopVisitor","combine","_len","visitors","result","validateSchema","typeVisitor"],"mappings":"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"}