{"version":3,"file":"extractSchema.js","sources":["../../../../src/_internal/cli/threads/extractSchema.ts"],"sourcesContent":["import {isMainThread, parentPort, workerData as _workerData} from 'node:worker_threads'\n\nimport {extractSchema} from '@sanity/schema/_internal'\nimport {type Workspace} from 'sanity'\n\nimport {getStudioWorkspaces} from '../util/getStudioWorkspaces'\nimport {mockBrowserEnvironment} from '../util/mockBrowserEnvironment'\n\nexport interface ExtractSchemaWorkerData {\n  workDir: string\n  workspaceName?: string\n  enforceRequiredFields?: boolean\n  format: 'groq-type-nodes' | string\n}\n\nexport interface ExtractSchemaWorkerResult {\n  schema: ReturnType<typeof extractSchema>\n}\n\nif (isMainThread || !parentPort) {\n  throw new Error('This module must be run as a worker thread')\n}\n\nconst opts = _workerData as ExtractSchemaWorkerData\nconst cleanup = mockBrowserEnvironment(opts.workDir)\n\nasync function main() {\n  try {\n    if (opts.format !== 'groq-type-nodes') {\n      throw new Error(`Unsupported format: \"${opts.format}\"`)\n    }\n\n    const workspaces = await getStudioWorkspaces({basePath: opts.workDir})\n\n    const workspace = getWorkspace({workspaces, workspaceName: opts.workspaceName})\n\n    const schema = extractSchema(workspace.schema, {\n      enforceRequiredFields: opts.enforceRequiredFields,\n    })\n\n    parentPort?.postMessage({\n      schema,\n    } satisfies ExtractSchemaWorkerResult)\n  } finally {\n    cleanup()\n  }\n}\n\nmain()\n\nfunction getWorkspace({\n  workspaces,\n  workspaceName,\n}: {\n  workspaces: Workspace[]\n  workspaceName?: string\n}): Workspace {\n  if (workspaces.length === 0) {\n    throw new Error('No studio configuration found')\n  }\n\n  if (workspaces.length === 1) {\n    return workspaces[0]\n  }\n\n  if (workspaceName === undefined) {\n    throw new Error(\n      `Multiple workspaces found. Please specify which workspace to use with '--workspace'.`,\n    )\n  }\n  const workspace = workspaces.find((w) => w.name === workspaceName)\n  if (!workspace) {\n    throw new Error(`Could not find workspace \"${workspaceName}\"`)\n  }\n  return workspace\n}\n"],"names":["isMainThread","parentPort","Error","opts","_workerData","cleanup","mockBrowserEnvironment","workDir","main","_a","format","concat","workspaces","getStudioWorkspaces","basePath","workspace","getWorkspace","workspaceName","schema","extractSchema","enforceRequiredFields","postMessage","_ref","length","find","w","name"],"mappings":";;;;;;AAmBA,IAAIA,mBAAA,CAAAA,YAAA,IAAgB,CAACC,mBAAAA,CAAAA,UAAY,EAAA;EACzB,MAAA,IAAIC,MAAM,4CAA4C,CAAA;AAC9D;AAEA,MAAMC,IAAO,GAAAC,mBAAAA,CAAAA,UAAA;AACb,MAAMC,OAAA,GAAUC,sBAAuB,CAAAA,sBAAA,CAAAH,IAAA,CAAKI,OAAO,CAAA;AAEnD,eAAeC,IAAOA,CAAA,EAAA;EA1BtB,IAAAC,EAAA;EA2BM,IAAA;IACE,IAAAN,IAAA,CAAKO,WAAW,iBAAmB,EAAA;MACrC,MAAM,IAAIR,KAAA,CAAM,uBAAwB,CAAAS,MAAA,CAAAR,IAAA,CAAKO,QAAM,GAAG,CAAA,CAAA;IACxD;IAEA,MAAME,aAAa,MAAMC,uCAAA,CAAoB;MAACC,QAAU,EAAAX,IAAA,CAAKI;KAAQ,CAAA;IAErE,MAAMQ,YAAYC,YAAa,CAAA;MAACJ;MAAYK,aAAe,EAAAd,IAAA,CAAKc;KAAc,CAAA;IAExE,MAAAC,MAAA,GAASC,SAAAA,CAAAA,aAAc,CAAAJ,SAAA,CAAUG,MAAQ,EAAA;MAC7CE,uBAAuBjB,IAAK,CAAAiB;IAAA,CAC7B,CAAA;IAED,CAAAX,EAAA,GAAAR,mBAAAA,CAAAA,UAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAQ,EAAA,CAAYY,WAAY,CAAA;MACtBH;IAAA,CACF,CAAA;EAAA,CACA,SAAA;IACQb,OAAA,EAAA;EACV;AACF;AAEAG,IAAK,EAAA;AAEL,SAASQ,YAAaA,CAAAM,IAAA,EAMR;EAAA,IANQ;IACpBV,UAAA;IACAK;EACF,CAGc,GAAAK,IAAA;EACR,IAAAV,UAAA,CAAWW,WAAW,CAAG,EAAA;IACrB,MAAA,IAAIrB,MAAM,+BAA+B,CAAA;EACjD;EAEI,IAAAU,UAAA,CAAWW,WAAW,CAAG,EAAA;IAC3B,OAAOX,WAAW,CAAC,CAAA;EACrB;EAEA,IAAIK,kBAAkB,KAAW,CAAA,EAAA;IAC/B,MAAM,IAAIf,KAAA,CACR,sFAAA,CACF;EACF;EACA,MAAMa,YAAYH,UAAW,CAAAY,IAAA,CAAMC,CAAM,IAAAA,CAAA,CAAEC,SAAST,aAAa,CAAA;EACjE,IAAI,CAACF,SAAW,EAAA;IACd,MAAM,IAAIb,KAAA,CAAM,4BAA6B,CAAAS,MAAA,CAAAM,aAAA,EAAa,GAAG,CAAA,CAAA;EAC/D;EACO,OAAAF,SAAA;AACT"}