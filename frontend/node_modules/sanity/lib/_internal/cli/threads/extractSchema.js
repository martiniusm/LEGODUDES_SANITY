'use strict';

var node_worker_threads = require('node:worker_threads');
var _internal = require('@sanity/schema/_internal');
var getStudioWorkspaces = require('../../../_chunks/getStudioWorkspaces-BP-leiyc.js');
var mockBrowserEnvironment = require('../../../_chunks/mockBrowserEnvironment-Bpx7ZdVR.js');
if (node_worker_threads.isMainThread || !node_worker_threads.parentPort) {
  throw new Error("This module must be run as a worker thread");
}
const opts = node_worker_threads.workerData;
const cleanup = mockBrowserEnvironment.mockBrowserEnvironment(opts.workDir);
async function main() {
  var _a;
  try {
    if (opts.format !== "groq-type-nodes") {
      throw new Error('Unsupported format: "'.concat(opts.format, '"'));
    }
    const workspaces = await getStudioWorkspaces.getStudioWorkspaces({
      basePath: opts.workDir
    });
    const workspace = getWorkspace({
      workspaces,
      workspaceName: opts.workspaceName
    });
    const schema = _internal.extractSchema(workspace.schema, {
      enforceRequiredFields: opts.enforceRequiredFields
    });
    (_a = node_worker_threads.parentPort) == null ? void 0 : _a.postMessage({
      schema
    });
  } finally {
    cleanup();
  }
}
main();
function getWorkspace(_ref) {
  let {
    workspaces,
    workspaceName
  } = _ref;
  if (workspaces.length === 0) {
    throw new Error("No studio configuration found");
  }
  if (workspaces.length === 1) {
    return workspaces[0];
  }
  if (workspaceName === void 0) {
    throw new Error("Multiple workspaces found. Please specify which workspace to use with '--workspace'.");
  }
  const workspace = workspaces.find(w => w.name === workspaceName);
  if (!workspace) {
    throw new Error('Could not find workspace "'.concat(workspaceName, '"'));
  }
  return workspace;
}
//# sourceMappingURL=extractSchema.js.map
