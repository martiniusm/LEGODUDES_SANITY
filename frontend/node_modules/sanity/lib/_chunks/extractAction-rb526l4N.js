'use strict';

var promises = require('node:fs/promises');
var path = require('node:path');
var node_worker_threads = require('node:worker_threads');
var readPkgUp = require('read-pkg-up');
function _interopDefaultCompat(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    default: e
  };
}
var readPkgUp__default = /*#__PURE__*/_interopDefaultCompat(readPkgUp);
async function extractAction(args, _ref) {
  let {
    workDir,
    output
  } = _ref;
  var _a;
  const flags = args.extOptions;
  const formatFlat = flags.format || "groq-type-nodes";
  const rootPkgPath = (_a = readPkgUp__default.default.sync({
    cwd: __dirname
  })) == null ? void 0 : _a.path;
  if (!rootPkgPath) {
    throw new Error("Could not find root directory for `sanity` package");
  }
  const workerPath = path.join(path.dirname(rootPkgPath), "lib", "_internal", "cli", "threads", "extractSchema.js");
  const spinner = output.spinner({}).start(flags["enforce-required-fields"] ? "Extracting schema, with enforced required fields" : "Extracting schema");
  const worker = new node_worker_threads.Worker(workerPath, {
    workerData: {
      workDir,
      workspaceName: flags.workspace,
      enforceRequiredFields: flags["enforce-required-fields"],
      format: formatFlat
    },
    // eslint-disable-next-line no-process-env
    env: process.env
  });
  const {
    schema
  } = await new Promise((resolve, reject) => {
    worker.addListener("message", resolve);
    worker.addListener("error", reject);
  });
  const path$1 = flags.path || path.join(process.cwd(), "schema.json");
  spinner.text = "Writing schema to ".concat(path$1);
  await promises.writeFile(path$1, JSON.stringify(schema, null, 2));
  spinner.succeed("Extracted schema");
}
exports.default = extractAction;
//# sourceMappingURL=extractAction-rb526l4N.js.map
