{"version":3,"file":"extractAction-CwHvSxr-.js","sources":["../../src/_internal/cli/actions/schema/extractAction.ts"],"sourcesContent":["import {writeFile} from 'node:fs/promises'\nimport {dirname, join} from 'node:path'\nimport {Worker} from 'node:worker_threads'\n\nimport {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport readPkgUp from 'read-pkg-up'\n\nimport {\n  type ExtractSchemaWorkerData,\n  type ExtractSchemaWorkerResult,\n} from '../../threads/extractSchema'\n\ninterface ExtractFlags {\n  workspace?: string\n  path?: string\n  'enforce-required-fields'?: boolean\n  format?: 'groq-type-nodes' | string\n}\n\nexport type SchemaValidationFormatter = (result: ExtractSchemaWorkerResult) => string\n\nexport default async function extractAction(\n  args: CliCommandArguments<ExtractFlags>,\n  {workDir, output}: CliCommandContext,\n): Promise<void> {\n  const flags = args.extOptions\n  const formatFlat = flags.format || 'groq-type-nodes'\n\n  const rootPkgPath = readPkgUp.sync({cwd: __dirname})?.path\n  if (!rootPkgPath) {\n    throw new Error('Could not find root directory for `sanity` package')\n  }\n\n  const workerPath = join(\n    dirname(rootPkgPath),\n    'lib',\n    '_internal',\n    'cli',\n    'threads',\n    'extractSchema.js',\n  )\n\n  const spinner = output\n    .spinner({})\n    .start(\n      flags['enforce-required-fields']\n        ? 'Extracting schema, with enforced required fields'\n        : 'Extracting schema',\n    )\n\n  const worker = new Worker(workerPath, {\n    workerData: {\n      workDir,\n      workspaceName: flags.workspace,\n      enforceRequiredFields: flags['enforce-required-fields'],\n      format: formatFlat,\n    } satisfies ExtractSchemaWorkerData,\n    // eslint-disable-next-line no-process-env\n    env: process.env,\n  })\n\n  const {schema} = await new Promise<ExtractSchemaWorkerResult>((resolve, reject) => {\n    worker.addListener('message', resolve)\n    worker.addListener('error', reject)\n  })\n\n  const path = flags.path || join(process.cwd(), 'schema.json')\n\n  spinner.text = `Writing schema to ${path}`\n\n  await writeFile(path, JSON.stringify(schema, null, 2))\n\n  spinner.succeed('Extracted schema')\n}\n"],"names":["extractAction","args","_ref","workDir","output","_a","flags","extOptions","formatFlat","format","rootPkgPath","sync","cwd","__dirname","path","Error","workerPath","join","dirname","spinner","start","worker","Worker","workerData","workspaceName","workspace","enforceRequiredFields","env","process","schema","Promise","resolve","reject","addListener","text","concat","writeFile","JSON","stringify","succeed"],"mappings":";;;;AAqBA,eAA8BA,aAC5BA,CAAAC,IAAA,EAAAC,IAAA,EAEe;EAAA,IADf;IAACC,OAAA;IAASC;GACK,GAAAF,IAAA;EAxBjB,IAAAG,EAAA;EAyBE,MAAMC,QAAQL,IAAK,CAAAM,UAAA;EACb,MAAAC,UAAA,GAAaF,MAAMG,MAAU,IAAA,iBAAA;EAE7B,MAAAC,WAAA,GAAA,CAAcL,eAAUM,IAAK,CAAA;IAACC,KAAKC;EAAS,CAAC,MAA/B,IAAkC,GAAA,KAAA,CAAA,GAAAR,EAAA,CAAAS,IAAA;EACtD,IAAI,CAACJ,WAAa,EAAA;IACV,MAAA,IAAIK,MAAM,oDAAoD,CAAA;EACtE;EAEA,MAAMC,UAAa,GAAAC,IAAA,CACjBC,QAAQR,WAAW,CAAA,EACnB,KAAA,EACA,WAAA,EACA,KAAA,EACA,SAAA,EACA,kBAAA,CACF;EAEA,MAAMS,OAAU,GAAAf,MAAA,CACbe,OAAQ,CAAA,CAAA,CAAE,CACV,CAAAC,KAAA,CACCd,KAAA,CAAM,yBAAyB,CAAA,GAC3B,kDACA,GAAA,mBAAA,CACN;EAEI,MAAAe,MAAA,GAAS,IAAIC,MAAA,CAAON,UAAY,EAAA;IACpCO,UAAY,EAAA;MACVpB,OAAA;MACAqB,eAAelB,KAAM,CAAAmB,SAAA;MACrBC,qBAAA,EAAuBpB,MAAM,yBAAyB,CAAA;MACtDG,MAAQ,EAAAD;IACV,CAAA;IAAA;IAEAmB,KAAKC,OAAQ,CAAAD;EAAA,CACd,CAAA;EAEK,MAAA;IAACE;GAAU,GAAA,MAAM,IAAIC,OAAmC,CAAA,CAACC,SAASC,MAAW,KAAA;IAC1EX,MAAA,CAAAY,WAAA,CAAY,WAAWF,OAAO,CAAA;IAC9BV,MAAA,CAAAY,WAAA,CAAY,SAASD,MAAM,CAAA;EAAA,CACnC,CAAA;EAED,MAAMlB,OAAOR,KAAM,CAAAQ,IAAA,IAAQG,KAAKW,OAAQ,CAAAhB,GAAA,CAAA,GAAO,aAAa,CAAA;EAE5DO,OAAA,CAAQe,OAAO,oBAAqB,CAAAC,MAAA,CAAArB,IAAA,CAAA;EAEpC,MAAMsB,UAAUtB,IAAM,EAAAuB,IAAA,CAAKC,UAAUT,MAAQ,EAAA,IAAA,EAAM,CAAC,CAAC,CAAA;EAErDV,OAAA,CAAQoB,QAAQ,kBAAkB,CAAA;AACpC;"}