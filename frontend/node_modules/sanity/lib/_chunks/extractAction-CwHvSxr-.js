import { writeFile } from 'node:fs/promises';
import { join, dirname } from 'node:path';
import { Worker } from 'node:worker_threads';
import readPkgUp from 'read-pkg-up';
async function extractAction(args, _ref) {
  let {
    workDir,
    output
  } = _ref;
  var _a;
  const flags = args.extOptions;
  const formatFlat = flags.format || "groq-type-nodes";
  const rootPkgPath = (_a = readPkgUp.sync({
    cwd: __dirname
  })) == null ? void 0 : _a.path;
  if (!rootPkgPath) {
    throw new Error("Could not find root directory for `sanity` package");
  }
  const workerPath = join(dirname(rootPkgPath), "lib", "_internal", "cli", "threads", "extractSchema.js");
  const spinner = output.spinner({}).start(flags["enforce-required-fields"] ? "Extracting schema, with enforced required fields" : "Extracting schema");
  const worker = new Worker(workerPath, {
    workerData: {
      workDir,
      workspaceName: flags.workspace,
      enforceRequiredFields: flags["enforce-required-fields"],
      format: formatFlat
    },
    // eslint-disable-next-line no-process-env
    env: process.env
  });
  const {
    schema
  } = await new Promise((resolve, reject) => {
    worker.addListener("message", resolve);
    worker.addListener("error", reject);
  });
  const path = flags.path || join(process.cwd(), "schema.json");
  spinner.text = "Writing schema to ".concat(path);
  await writeFile(path, JSON.stringify(schema, null, 2));
  spinner.succeed("Extracted schema");
}
export { extractAction as default };
//# sourceMappingURL=extractAction-CwHvSxr-.js.map
